/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.AnalystRole;

import Business.Enterprise.Enterprise;
import Business.Organization.Organization;
import Business.Organization.PatientOrganization;
import Business.Patient.Patient;
import Business.UserAccount.UserAccount;
import Business.Utils.AgeCalculator;
import java.awt.CardLayout;


import java.awt.Color;
import java.math.RoundingMode;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartFrame;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.CategoryLabelPositions;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PiePlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.ValueMarker;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.general.DefaultPieDataset;

/**
 *
 * @author Saurabh
 */
public class GraphicalReportingJPanel extends javax.swing.JPanel {

    /**
     * Creates new form GraphicalReportingJPanel
     */
    private JPanel userProcessContainer;
    private UserAccount userAccount;
    private Enterprise enterprise;
    int countOfMalePatients=0;
        int countOfFemalePatients=0;
        int countOfOtherPatients=0;
    ArrayList<Float> ageList = new ArrayList<>();
    float totalAge=0;
    ArrayList<Patient> ageGroup_1_to_10=new ArrayList<>();
    ArrayList<Integer> ageGroupCountList = new ArrayList<>();
        ArrayList<String> ageGroupNameList = new ArrayList<>();
    ArrayList<Patient> analyticsPatientrList=new ArrayList<>();
        ArrayList<Patient> ageGroup_11_to_20=new ArrayList<>();
        ArrayList<Patient> ageGroup_21_to_30=new ArrayList<>();
        ArrayList<Patient> ageGroup_31_to_40=new ArrayList<>();
        ArrayList<Patient> ageGroup_41_to_50=new ArrayList<>();
        ArrayList<Patient> ageGroup_51_to_60=new ArrayList<>();
        ArrayList<Patient> ageGroup_61_to_70=new ArrayList<>();
        ArrayList<Patient> ageGroup_71_to_80=new ArrayList<>();
        ArrayList<Patient> ageGroup_81_to_90=new ArrayList<>();
        ArrayList<Patient> ageGroup_91_to_100=new ArrayList<>();
        ArrayList<Patient> ageGroup_101_above=new ArrayList<>();
    public GraphicalReportingJPanel(JPanel userProcessContainer, UserAccount userAccount,Enterprise enterprise ) {
        initComponents();
        this.userProcessContainer=userProcessContainer;
        this.userAccount=userAccount;
        this.enterprise=enterprise;
        generateAnalytics();
        generateAgeGroupBasedAnalytics();
        mostPrevalenetCancerForAnAgeGroup();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        backjButton1 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        backjButton2 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        genderBasedDistributionJButton = new javax.swing.JButton();

        backjButton1.setBackground(new java.awt.Color(0, 0, 0));
        backjButton1.setForeground(new java.awt.Color(255, 255, 255));
        backjButton1.setIcon(new javax.swing.ImageIcon("C:\\Users\\Saurabh\\Desktop\\GRE docs\\NEU\\Assignments\\AED\\Project_Proposal\\icons\\arrow-back-icon.png")); // NOI18N
        backjButton1.setText("Back");
        backjButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backjButton1ActionPerformed(evt);
            }
        });

        setBackground(new java.awt.Color(255, 255, 255));

        jButton1.setBackground(new java.awt.Color(0, 0, 0));
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/userinterface/Icons/age-graph-icon.png"))); // NOI18N
        jButton1.setText("Age Graph");
        jButton1.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        backjButton2.setBackground(new java.awt.Color(0, 0, 0));
        backjButton2.setForeground(new java.awt.Color(255, 255, 255));
        backjButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/userinterface/Icons/arrow-back-icon.png"))); // NOI18N
        backjButton2.setText("Back");
        backjButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backjButton2ActionPerformed(evt);
            }
        });

        jButton2.setBackground(new java.awt.Color(0, 0, 0));
        jButton2.setForeground(new java.awt.Color(255, 255, 255));
        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/userinterface/Icons/age-group-graph.png"))); // NOI18N
        jButton2.setText("Cancer Cases Accross Age groups");
        jButton2.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jComboBox1.setBackground(new java.awt.Color(0, 0, 0));
        jComboBox1.setForeground(new java.awt.Color(255, 255, 255));
        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Age Group 1 to 10", "Age Group 11 to 20", "Age Group 21 to 30", "Age Group 31 to 40", "Age Group 41 to 50", "Age Group 51 to 60", "Age Group 61 to 70", "Age Group 71 to 80", "Age Group 81 to 90", "Age Group 91 to 100", "Age Group 101 above" }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jLabel1.setText("Select Age Group");

        jButton3.setBackground(new java.awt.Color(0, 0, 0));
        jButton3.setForeground(new java.awt.Color(255, 255, 255));
        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/userinterface/Icons/generate-Graph.png"))); // NOI18N
        jButton3.setText("Generate Graph");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel2.setText("Graphical Reporting");

        genderBasedDistributionJButton.setBackground(new java.awt.Color(0, 0, 0));
        genderBasedDistributionJButton.setForeground(new java.awt.Color(255, 255, 255));
        genderBasedDistributionJButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/userinterface/Icons/Pie-Chart-icon.png"))); // NOI18N
        genderBasedDistributionJButton.setText("Gender Based Distribution of Cancer Cases");
        genderBasedDistributionJButton.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        genderBasedDistributionJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                genderBasedDistributionJButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 106, Short.MAX_VALUE)
                .addComponent(backjButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jComboBox1, 0, 138, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(genderBasedDistributionJButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addComponent(jLabel2))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(backjButton2)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton1)
                .addGap(33, 33, 33)
                .addComponent(jButton2)
                .addGap(30, 30, 30)
                .addComponent(genderBasedDistributionJButton)
                .addGap(26, 26, 26)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton3))
                .addContainerGap(43, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        try{
            ageGraph(analyticsPatientrList,ageList,totalAge);
        }
        catch(Exception e){
            JOptionPane.showMessageDialog(null,"No data available to generate graphs");
            return;
        }
         
    }//GEN-LAST:event_jButton1ActionPerformed

    private void backjButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backjButton1ActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this.getParent().getParent());
        userProcessContainer.remove(this.getParent());
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backjButton1ActionPerformed

    private void backjButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backjButton2ActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this.getParent().getParent());
        userProcessContainer.remove(this.getParent());
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backjButton2ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        try{
            cancerCasesAcrossAgeGroups(ageGroupNameList,ageGroupCountList);
        }catch(Exception e){
            JOptionPane.showMessageDialog(null, "No data available to generate graphs");
            return;
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        // TODO add your handling code here:
        

    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        try{
            String groupName=(String)jComboBox1.getSelectedItem();
        if(groupName=="Age Group 1 to 10"){
            fillTableForAgeGroupSpecifCancer(ageGroup_1_to_10);
        }
        if(groupName=="Age Group 11 to 20"){
            fillTableForAgeGroupSpecifCancer(ageGroup_11_to_20);
        }
        if(groupName=="Age Group 21 to 30"){
            fillTableForAgeGroupSpecifCancer(ageGroup_21_to_30);
        }
        if(groupName=="Age Group 31 to 40"){
            fillTableForAgeGroupSpecifCancer(ageGroup_31_to_40);
        }
        if(groupName=="Age Group 41 to 50"){
            fillTableForAgeGroupSpecifCancer(ageGroup_41_to_50);
        }
        if(groupName=="Age Group 51 to 60"){
            fillTableForAgeGroupSpecifCancer(ageGroup_51_to_60);
        }
        if(groupName=="Age Group 61 to 70"){
            fillTableForAgeGroupSpecifCancer(ageGroup_61_to_70);
        }
        if(groupName=="Age Group 71 to 80"){
            fillTableForAgeGroupSpecifCancer(ageGroup_71_to_80);

        }
        if(groupName=="Age Group 81 to 90"){
            fillTableForAgeGroupSpecifCancer(ageGroup_81_to_90);
        }
        if(groupName=="Age Group 91 to 101"){
            fillTableForAgeGroupSpecifCancer(ageGroup_91_to_100);
        }
        if(groupName=="Age Group 101 above"){
            fillTableForAgeGroupSpecifCancer(ageGroup_101_above);
        }
        }catch(Exception e){
            JOptionPane.showMessageDialog(null, "No data to plot Graphs");
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void genderBasedDistributionJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_genderBasedDistributionJButtonActionPerformed
        // TODO add your handling code here:
        try{
            genderBasedDistribution(countOfMalePatients,countOfFemalePatients,countOfOtherPatients);
        }
        catch(Exception e){
            JOptionPane.showMessageDialog(null,"No data available to generate graphs");
            return;
        }
    }//GEN-LAST:event_genderBasedDistributionJButtonActionPerformed
   public void genderBasedDistribution(int males,int females,int others){
       
        DefaultPieDataset piedataSet=new DefaultPieDataset();
        
        
            piedataSet.setValue("Males",males);
            piedataSet.setValue("Females",females);
            piedataSet.setValue("Others",others);
            
           
        JFreeChart chartPie = ChartFactory.createPieChart("Gender Based Count Distribution", piedataSet, true, true,true);
        PiePlot p=(PiePlot)chartPie.getPlot();
        
        p.setBackgroundPaint(Color.WHITE);
        ChartFrame frame1= new ChartFrame("Cancer Cases as per Gender",chartPie);
        frame1.setVisible(true);
        frame1.setSize(450,500);
   }
    
    
    public void fillTableForAgeGroupSpecifCancer(ArrayList<Patient> list){
        ArrayList<Integer> cancerTypeCount=new ArrayList<>();
        ArrayList<String> cancerTypes = new ArrayList<>();
        cancerTypes.add(0,"Adrenal Cancer");
        cancerTypes.add(1,"Bile Duct Cancer");
        cancerTypes.add(2,"Bladder Cancer");
        cancerTypes.add(3,"Bone Cancer");
        cancerTypes.add(4,"Breast Cancer");
        cancerTypes.add(5,"Cervical Cancer");
        cancerTypes.add(6,"Colon/Rectum Cancer");
        cancerTypes.add(7,"Endometrial Cancer");
        cancerTypes.add(8,"Esophagus Cancer");
        cancerTypes.add(9,"Eye Cancer");
        cancerTypes.add(10,"Gallbladder Cancer");
        cancerTypes.add(11,"Kidney Cancer");
        cancerTypes.add(12,"Laryngeal and Hypopharyngeal Cancer");
        cancerTypes.add(13,"Liver Cancer");
        cancerTypes.add(14,"Lung Cancer");
        cancerTypes.add(15,"Nasal Cavity and Paranasal Sinus Cancer");
        cancerTypes.add(16,"Nasopharyngeal Cancer");
        cancerTypes.add(17,"Oral Cavity and Oropharyngeal Cancer");
        cancerTypes.add(18,"Ovarian Cancer");
        cancerTypes.add(19,"Pancreatic Cancer");
        cancerTypes.add(20,"Penile Cancer");
        cancerTypes.add(21,"Prostate Cancer");
        cancerTypes.add(22,"Salivary Gland Cancer");
        cancerTypes.add(23,"Skin Cancer");
        cancerTypes.add(24,"Small Intestine Cancer");
        cancerTypes.add(25,"Stomach Cancer");
        cancerTypes.add(26,"Testicular Cancer");
        cancerTypes.add(27,"Thymus Cancer");
        cancerTypes.add(28,"Thyroid Cancer");
        cancerTypes.add(29,"Uterine Sarcoma");
        cancerTypes.add(30,"Vaginal Cancer");
        cancerTypes.add(31,"Vulvar Cancer");


        
        for(int i=0;i<cancerTypes.size();i++){
            cancerTypeCount.add(0);
        }
        
        if(!list.isEmpty()){
                            for(Patient patient:list){
                                for(String cancer:cancerTypes){
                                    if(patient.getTypeOfCancer().trim().equals(cancer)){
                                    int indexCount=cancerTypes.indexOf(cancer);
                                    
                                    int temp=1+cancerTypeCount.get(indexCount);
                                    cancerTypeCount.set(indexCount, temp);
                                    break;
                                }
                               }
                                
                                
                           }
                        }

        DefaultCategoryDataset dataSet=new DefaultCategoryDataset();
        int count=cancerTypes.size();
        for(int i=0;i<count;i++){
            
            
            dataSet.setValue(new Integer(cancerTypeCount.get(i)),"Count",cancerTypes.get(i));
            
        }
        //                    JFreeChart jchart=createChart(createDataset(vsh));
        JFreeChart chart = ChartFactory.createBarChart(jComboBox1.getSelectedItem().toString(),"Cancer Type","Count", dataSet,PlotOrientation.VERTICAL,false,true,false);
        CategoryPlot plo=chart.getCategoryPlot();
        CategoryAxis domainAxis = plo.getDomainAxis();
        domainAxis.setCategoryLabelPositions(CategoryLabelPositions.UP_45);
        
        ArrayList<Integer> temp=cancerTypeCount;
        Collections.sort(temp);
        int last=temp.size()-1;
        ValueMarker high=new ValueMarker(temp.get(last));
        high.setLabel("High");
        high.setLabelTextAnchor(org.jfree.ui.TextAnchor.TOP_LEFT);
        high.setPaint(Color.GREEN);
        plo.addRangeMarker(high);
        
        
        
        ValueMarker low=new ValueMarker(temp.get(0));
        low.setLabel("low");
        low.setLabelTextAnchor(org.jfree.ui.TextAnchor.TOP_LEFT);
        low.setPaint(Color.GREEN);
        plo.addRangeMarker(low);
        
        
        
        plo.setBackgroundPaint(null);
        ChartFrame frame= new ChartFrame("Graph",chart);
        frame.setVisible(true);
        frame.setSize(450,500);
        
    }
    public void cancerCasesAcrossAgeGroups(ArrayList<String> namelist,ArrayList<Integer> countlist){
        DefaultCategoryDataset dataSet=new DefaultCategoryDataset();
        
        int i=0;
        int count=ageGroupCountList.size();
         for(i=0;i<count;i++){
            
            
            dataSet.setValue(new Integer(ageGroupCountList.get(i)),"Count",ageGroupNameList.get(i));
            
        }
        //                    JFreeChart jchart=createChart(createDataset(vsh));
        JFreeChart chart = ChartFactory.createBarChart("Cancer Cases","Age Group","Count", dataSet,PlotOrientation.VERTICAL,false,true,false);
        CategoryPlot plo=chart.getCategoryPlot();
        CategoryAxis domainAxis = plo.getDomainAxis();
        domainAxis.setCategoryLabelPositions(CategoryLabelPositions.UP_45);
        
        ArrayList<Integer> temp=new ArrayList<>(10);
        
        for(int c=0;c<11;c++){
            temp.add(c);
            int tempval=ageGroupCountList.get(c);
            temp.set(c,tempval);
        }
        Collections.sort(temp);
        int last=temp.size()-1;
        ValueMarker high=new ValueMarker(temp.get(last));
        high.setLabel("High");
        high.setLabelTextAnchor(org.jfree.ui.TextAnchor.TOP_LEFT);
        high.setPaint(Color.GREEN);
        plo.addRangeMarker(high);
        
        
        
        ValueMarker low=new ValueMarker(temp.get(0));
        low.setLabel("low");
        low.setLabelTextAnchor(org.jfree.ui.TextAnchor.TOP_LEFT);
        low.setPaint(Color.GREEN);
        plo.addRangeMarker(low);
        
        
        
        plo.setBackgroundPaint(null);
        ChartFrame frame= new ChartFrame("Graph",chart);
        frame.setVisible(true);
        frame.setSize(450,500);
    }
    
    public void ageGraph(ArrayList<Patient> plist,ArrayList<Float> agelist,float totalage){
         
        DefaultCategoryDataset dataSet=new DefaultCategoryDataset();
        int j=1;
        int i=0;
        int count=analyticsPatientrList.size();
         for(i=0;i<count;i++){
            
            
            dataSet.setValue(new Float(agelist.get(i)),"Age in Years",analyticsPatientrList.get(i).toString());
            
        }
        //                    JFreeChart jchart=createChart(createDataset(vsh));
        JFreeChart chart = ChartFactory.createBarChart("Age in Years","Name","Age", dataSet,PlotOrientation.VERTICAL,false,true,false);
        CategoryPlot plo=chart.getCategoryPlot();
        CategoryAxis domainAxis = plo.getDomainAxis();
        domainAxis.setCategoryLabelPositions(CategoryLabelPositions.UP_45);
        ValueMarker high=new ValueMarker(agelist.get(0));
        high.setLabel("High:"+agelist.get(0));
        high.setLabelTextAnchor(org.jfree.ui.TextAnchor.TOP_LEFT);
        high.setPaint(Color.GREEN);
        plo.addRangeMarker(high);
        
        int last=agelist.size()-1;
        ValueMarker low=new ValueMarker(ageList.get(last));
        low.setLabel("Low:"+ageList.get(last));
        low.setLabelTextAnchor(org.jfree.ui.TextAnchor.TOP_LEFT);
        low.setPaint(Color.GREEN);
        plo.addRangeMarker(low);
        
        ValueMarker avg=new ValueMarker(totalage/analyticsPatientrList.size());
        avg.setLabel("Average Age:"+totalage/analyticsPatientrList.size());
        avg.setLabelTextAnchor(org.jfree.ui.TextAnchor.TOP_LEFT);
        avg.setPaint(Color.CYAN);
        plo.addRangeMarker(avg);
        
        plo.setBackgroundPaint(null);
        ChartFrame frame= new ChartFrame("Graph",chart);
        frame.setVisible(true);
        frame.setSize(450,500);
        
    }
    
    public void generateAnalytics(){
        int totalNumberofPatients=0;
        
        DecimalFormat df=new DecimalFormat("#.##");
        df.setRoundingMode(RoundingMode.CEILING);
        
      
        
        PatientOrganization po=null;
        int   [] groupMin = new int[]{0,10,20,30,40,50,60,70,80,90,100};
        int [] groupMax =new int[]{11,21,31,41,51,61,71,81,91,101};
        
        
        if(!enterprise.getOrganizationDirectory().getOrganizationList().isEmpty()){
        for(Organization o:enterprise.getOrganizationDirectory().getOrganizationList()){
            if(o instanceof PatientOrganization){
                po=(PatientOrganization)o;
                if(!po.getPatientDirectory().getPatientList().isEmpty()){
                for(Patient patient:po.getPatientDirectory().getPatientList()){
                    totalNumberofPatients=totalNumberofPatients+1;
                    float years=AgeCalculator.calculategetage(new Date(), patient.getDateOfBirth());
                    float months=AgeCalculator.getMonths(new Date(), patient.getDateOfBirth());
                    float monthsInYears=months/12;
                    ageList.add(Float.parseFloat(df.format(years+monthsInYears)));
                    analyticsPatientrList.add(patient);
                    totalAge=years+monthsInYears+totalAge;
                    if(patient.getGender().equals("Male")){
                        countOfMalePatients=countOfMalePatients+1;
                    }
                    if(patient.getGender().equals("Female")){
                        countOfFemalePatients=countOfFemalePatients+1;
                    }
                    if(patient.getGender().equals("Other")){
                        countOfOtherPatients=countOfOtherPatients+1;
                    }
                   }
                }
                
            }
        
        }
        } 
     boolean flag = true;
     float temp;
     Patient tempPatient;
     while(flag){
         flag = false;
         for(int j=0;j<totalNumberofPatients-1;j++){
                if(ageList.get(j)<ageList.get(j+1)){
                    temp=ageList.get(j);
                    ageList.set(j,ageList.get(j+1));
                    ageList.set(j+1, temp);

                    tempPatient=analyticsPatientrList.get(j);
                    analyticsPatientrList.set(j,analyticsPatientrList.get(j+1));
                    analyticsPatientrList.set(j+1, tempPatient);
                    flag=true;
                }

            }      
        } 
        
        
        
        
        
        //Initializing count list and group name list
        
        for(int i=0;i<11;i++){
            ageGroupCountList.add(0);
        }
        
        ageGroupNameList.add(0,"Age Group1 to 10" );
        ageGroupNameList.add(1,"Age Group11 to 20" );
        ageGroupNameList.add(2,"Age Group21 to 30" );
        ageGroupNameList.add(3,"Age Group31 to 40" );
        ageGroupNameList.add(4,"Age Group41 to 50" );
        ageGroupNameList.add(5,"Age Group51 to 60" );
        ageGroupNameList.add(6,"Age Group61 to 70" );
        ageGroupNameList.add(7,"Age Group71 to 80" );
        ageGroupNameList.add(8,"Age Group81 to 90" );
        ageGroupNameList.add(9,"Age Group91 to 100" );
        ageGroupNameList.add(10,"Age Group101 and above" );
        //sorting in age groups:
        
        for(float value:ageList){  
            int tempVal=0;
            for(int i=0;i<11;i++){
                 if(i==10){
                        if(value > groupMin[i]){
                            tempVal=ageGroupCountList.get(i)+1;
                            ageGroupCountList.set(i, tempVal);
                            break;
                        } 
                }
                     if(value>groupMin[i] && value<groupMax[i]){

                            tempVal=ageGroupCountList.get(i)+1;
                            ageGroupCountList.set(i, tempVal);
                            break;
                     }
             }
        }
        
//        try{
//        totalPatientsJTextField.setText(Integer.toString(totalNumberofPatients));
//        avgAgeJTextField.setText(df.format(totalAge/totalNumberofPatients));
//        lowestAgeJTextField.setText(Float.toString(ageList.get(ageList.size()-1)));
//        highestAgeJTextField.setText(Float.toString(ageList.get(0)));
//        DefaultTableModel model=(DefaultTableModel)jTable1.getModel();
//        model.setRowCount(0);
//        jTable1.setRowSorter(new TableRowSorter(model));
//        for(int i=0;i<11;i++){
//            Object[] row = new Object[2];
//                row[0] = ageGroupNameList.get(i);
//                row[1] = ageGroupCountList.get(i);
//                model.addRow(row);
//        }
//        }
//        catch(Exception e){
//            JOptionPane.showMessageDialog(null, "No Data Available to display.");
//            totalPatientsJTextField.setText("");
//            avgAgeJTextField.setText("");
//            lowestAgeJTextField.setText("");
//            highestAgeJTextField.setText("");
//            return;
//        }
        
    }
    
    public void generateAgeGroupBasedAnalytics(){
        ArrayList<Integer> cancerTypeCount=new ArrayList<>();
        ArrayList<String> cancerTypes = new ArrayList<>();
        cancerTypes.add(0,"Adrenal Cancer");
        cancerTypes.add(1,"Bile Duct Cancer");
        cancerTypes.add(2,"Bladder Cancer");
        cancerTypes.add(3,"Bone Cancer");
        cancerTypes.add(4,"Breast Cancer");
        cancerTypes.add(5,"Cervical Cancer");
        cancerTypes.add(6,"Colon/Rectum Cancer");
        cancerTypes.add(7,"Endometrial Cancer");
        cancerTypes.add(8,"Esophagus Cancer");
        cancerTypes.add(9,"Eye Cancer");
        cancerTypes.add(10,"Gallbladder Cancer");
        cancerTypes.add(11,"Kidney Cancer");
        cancerTypes.add(12,"Laryngeal and Hypopharyngeal Cancer");
        cancerTypes.add(13,"Liver Cancer");
        cancerTypes.add(14,"Lung Cancer");
        cancerTypes.add(15,"Nasal Cavity and Paranasal Sinus Cancer");
        cancerTypes.add(16,"Nasopharyngeal Cancer");
        cancerTypes.add(17,"Oral Cavity and Oropharyngeal Cancer");
        cancerTypes.add(18,"Ovarian Cancer");
        cancerTypes.add(19,"Pancreatic Cancer");
        cancerTypes.add(20,"Penile Cancer");
        cancerTypes.add(21,"Prostate Cancer");
        cancerTypes.add(22,"Salivary Gland Cancer");
        cancerTypes.add(23,"Skin Cancer");
        cancerTypes.add(24,"Small Intestine Cancer");
        cancerTypes.add(25,"Stomach Cancer");
        cancerTypes.add(26,"Testicular Cancer");
        cancerTypes.add(27,"Thymus Cancer");
        cancerTypes.add(28,"Thyroid Cancer");
        cancerTypes.add(29,"Uterine Sarcoma");
        cancerTypes.add(30,"Vaginal Cancer");
        cancerTypes.add(31,"Vulvar Cancer");


        
        for(int i=0;i<cancerTypes.size();i++){
            cancerTypeCount.add(0);
        }
        PatientOrganization po=null;
        
            if(!enterprise.getOrganizationDirectory().getOrganizationList().isEmpty()){
                for(Organization o:enterprise.getOrganizationDirectory().getOrganizationList()){
                    if(o instanceof PatientOrganization){
                        po=(PatientOrganization)o;
                        if(!po.getPatientDirectory().getPatientList().isEmpty()){
                            for(Patient patient:po.getPatientDirectory().getPatientList()){
                                for(String cancer:cancerTypes){
                                    if(patient.getTypeOfCancer().trim().equals(cancer)){
                                    int indexCount=cancerTypes.indexOf(cancer);
                                    
                                    int temp=1+cancerTypeCount.get(indexCount);
                                    cancerTypeCount.set(indexCount, temp);
                                    break;
                                }
                               }
                                
                                
                           }
                        }

                    }

                }
            }
        
        
        
//        DefaultTableModel model=(DefaultTableModel)typeofcancerjTable.getModel();
//        typeofcancerjTable.setRowSorter(new TableRowSorter(model));
//        model.setRowCount(0);
//        for(int i=0;i<cancerTypes.size();i++){
//            Object[] row = new Object[2];
//                row[0] = cancerTypes.get(i);
//                row[1] = cancerTypeCount.get(i);
//                model.addRow(row);
//        }
}

    
    public void mostPrevalenetCancerForAnAgeGroup(){
         PatientOrganization po=null;
        int   [] groupMin = new int[]{0,10,20,30,40,50,60,70,80,90,100};
        int [] groupMax =new int[]{11,21,31,41,51,61,71,81,91,101};
        float value;
        if(!enterprise.getOrganizationDirectory().getOrganizationList().isEmpty()){
        for(Organization o:enterprise.getOrganizationDirectory().getOrganizationList()){
            if(o instanceof PatientOrganization){
                po=(PatientOrganization)o;
                if(!po.getPatientDirectory().getPatientList().isEmpty()){
                for(Patient patient:po.getPatientDirectory().getPatientList()){
                    
                    float years=AgeCalculator.calculategetage(new Date(), patient.getDateOfBirth());
                    float months=AgeCalculator.getMonths(new Date(), patient.getDateOfBirth());
                    float monthsInYears=months/12;
                    value=years+monthsInYears;
                    
                    if(value >100 ){
                            ageGroup_101_above.add(patient);
                             
                        } 
                    if(value>0 && value<11){
                        ageGroup_1_to_10.add(patient);
                        
                     }
                    if(value>10 && value<21){
                        ageGroup_11_to_20.add(patient);
                        
                     }
                    if(value>20 && value<31){
                        ageGroup_21_to_30.add(patient);
                        
                     }
                    if(value>30 && value<41){
                        ageGroup_31_to_40.add(patient);
                        
                        
                     }
                    if(value>40 && value<51){
                        ageGroup_41_to_50.add(patient);
                        
                     }
                    if(value>50 && value<61){
                        ageGroup_51_to_60.add(patient);
                        
                     }
                    if(value>60 && value<71){
                        ageGroup_61_to_70.add(patient);
                        
                     }
                    if(value>70 && value<81){
                        ageGroup_71_to_80.add(patient);
                        
                     }
                    if(value>80 && value<91){
                        ageGroup_81_to_90.add(patient);
                        
                     }
                    if(value>90 && value<101){
                        ageGroup_91_to_100.add(patient);
                        
                     }
                    
                   }
                }
                
            }
        
        }
        }
        
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backjButton1;
    private javax.swing.JButton backjButton2;
    private javax.swing.JButton genderBasedDistributionJButton;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    // End of variables declaration//GEN-END:variables
}
