/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.AnalystRole;

import Business.Enterprise.Enterprise;
import Business.Organization.Organization;
import Business.Organization.PatientOrganization;
import Business.Patient.Patient;
import Business.UserAccount.UserAccount;
import Business.Utils.AgeCalculator;
import java.awt.CardLayout;
import java.math.RoundingMode;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author Saurabh
 */
public class TextualReportingJPanel extends javax.swing.JPanel {

    /**
     * Creates new form TextualReportingJPanel
     */
    private JPanel userProcessContainer;
    private UserAccount userAccount;
    private Enterprise enterprise;
    ArrayList<Patient> ageGroup_1_to_10=new ArrayList<>();
        ArrayList<Patient> ageGroup_11_to_20=new ArrayList<>();
        ArrayList<Patient> ageGroup_21_to_30=new ArrayList<>();
        ArrayList<Patient> ageGroup_31_to_40=new ArrayList<>();
        ArrayList<Patient> ageGroup_41_to_50=new ArrayList<>();
        ArrayList<Patient> ageGroup_51_to_60=new ArrayList<>();
        ArrayList<Patient> ageGroup_61_to_70=new ArrayList<>();
        ArrayList<Patient> ageGroup_71_to_80=new ArrayList<>();
        ArrayList<Patient> ageGroup_81_to_90=new ArrayList<>();
        ArrayList<Patient> ageGroup_91_to_100=new ArrayList<>();
        ArrayList<Patient> ageGroup_101_above=new ArrayList<>();
    public TextualReportingJPanel(JPanel userProcessContainer, UserAccount userAccount,Enterprise enterprise ) {
        initComponents();
        this.userProcessContainer=userProcessContainer;
        this.userAccount=userAccount;
        this.enterprise=enterprise;
        generateAnalytics();
        generateAgeGroupBasedAnalytics();
        mostPrevalenetCancerForAnAgeGroup();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel5 = new javax.swing.JLabel();
        totalPatientsJTextField = new javax.swing.JTextField();
        avgAgeJTextField = new javax.swing.JTextField();
        lowestAgeJTextField = new javax.swing.JTextField();
        highestAgeJTextField = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        backjButton1 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        typeofcancerjTable = new javax.swing.JTable();
        jLabel7 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox();
        jScrollPane3 = new javax.swing.JScrollPane();
        ageGroupSpecificCancer = new javax.swing.JTable();
        malePatientsJTextField = new javax.swing.JTextField();
        femalPatientsJTextField = new javax.swing.JTextField();
        otherPatientsjTextField = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setText("Total Number of Patients:");

        jLabel2.setText("Average Age of Patient suffering from Cancer:");

        jLabel3.setText("Lowest Age");

        jLabel4.setText("Highest Age");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Age Group", "Number of Patients"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(jTable1);

        jLabel5.setText("Number of Paitents as per age group:");

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel6.setText("Textual Reporting");

        backjButton1.setBackground(new java.awt.Color(0, 0, 0));
        backjButton1.setForeground(new java.awt.Color(255, 255, 255));
        backjButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/userinterface/Icons/arrow-back-icon.png"))); // NOI18N
        backjButton1.setText("Back");
        backjButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backjButton1ActionPerformed(evt);
            }
        });

        typeofcancerjTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Type of Cancer", "Number of Patient"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(typeofcancerjTable);

        jLabel7.setText("Type Specific Cases of Cancer");

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Age Group 1 to 10", "Age Group 11 to 20", "Age Group 21 to 30", "Age Group 31 to 40", "Age Group 41 to 50", "Age Group 51 to 60", "Age Group 61 to 70", "Age Group 71 to 80", "Age Group 81 to 90", "Age Group 91 to 100", "Age Group 101 above" }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        ageGroupSpecificCancer.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Type of Cancer", "Number of Patient"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(ageGroupSpecificCancer);

        jLabel8.setText("Males");

        jLabel9.setText("Females");

        jLabel10.setText("Others");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel8))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(204, 204, 204)
                                .addComponent(totalPatientsJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(57, 57, 57)
                                .addComponent(jLabel10))))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel4)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(highestAgeJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel3)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lowestAgeJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel2)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(avgAgeJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 452, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel7)
                    .addComponent(jLabel5)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(malePatientsJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel9)
                                    .addComponent(femalPatientsJTextField))))
                        .addGap(18, 18, 18)
                        .addComponent(otherPatientsjTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(38, 38, 38)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(backjButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 452, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(83, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel6)
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(totalPatientsJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(backjButton1))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(jLabel9)
                    .addComponent(jLabel10))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(malePatientsJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(femalPatientsJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(otherPatientsjTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(avgAgeJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(lowestAgeJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(highestAgeJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(15, 15, 15)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void backjButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backjButton1ActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this.getParent().getParent());
        userProcessContainer.remove(this.getParent());
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backjButton1ActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        // TODO add your handling code here:
        String groupName=(String)jComboBox1.getSelectedItem();
        if(groupName=="Age Group 1 to 10"){
        fillTableForAgeGroupSpecifCancer(ageGroup_1_to_10);
        }
        if(groupName=="Age Group 11 to 20"){
        fillTableForAgeGroupSpecifCancer(ageGroup_11_to_20);
        }
        if(groupName=="Age Group 21 to 30"){
        fillTableForAgeGroupSpecifCancer(ageGroup_21_to_30);
        }
        if(groupName=="Age Group 31 to 40"){
        fillTableForAgeGroupSpecifCancer(ageGroup_31_to_40);
        }
        if(groupName=="Age Group 41 to 50"){
        fillTableForAgeGroupSpecifCancer(ageGroup_41_to_50);
        }
        if(groupName=="Age Group 51 to 60"){
        fillTableForAgeGroupSpecifCancer(ageGroup_51_to_60);
        }
        if(groupName=="Age Group 61 to 70"){
        fillTableForAgeGroupSpecifCancer(ageGroup_61_to_70);
        }
        if(groupName=="Age Group 71 to 80"){
        fillTableForAgeGroupSpecifCancer(ageGroup_71_to_80);
        
        }
        if(groupName=="Age Group 81 to 90"){
        fillTableForAgeGroupSpecifCancer(ageGroup_81_to_90);
        }
        if(groupName=="Age Group 91 to 101"){
        fillTableForAgeGroupSpecifCancer(ageGroup_91_to_100);
        }
        if(groupName=="Age Group 101 above"){
        fillTableForAgeGroupSpecifCancer(ageGroup_101_above);
        }
        
        
    }//GEN-LAST:event_jComboBox1ActionPerformed
    public void generateAnalytics(){
        int totalNumberofPatients=0;
        float totalAge=0;
        int countOfMalePatients=0;
        int countOfFemalePatients=0;
        int countOfOtherPatients=0;
        DecimalFormat df=new DecimalFormat("#.##");
        df.setRoundingMode(RoundingMode.CEILING);
        ArrayList<Float> ageList = new ArrayList<>();
      
        ArrayList<Patient> analyticsPatientrList=new ArrayList<>();
        PatientOrganization po=null;
        int   [] groupMin = new int[]{0,10,20,30,40,50,60,70,80,90,100};
        int [] groupMax =new int[]{11,21,31,41,51,61,71,81,91,101};
        ArrayList<Integer> ageGroupCountList = new ArrayList<>();
        ArrayList<String> ageGroupNameList = new ArrayList<>();
        
        if(!enterprise.getOrganizationDirectory().getOrganizationList().isEmpty()){
        for(Organization o:enterprise.getOrganizationDirectory().getOrganizationList()){
            if(o instanceof PatientOrganization){
                po=(PatientOrganization)o;
                if(!po.getPatientDirectory().getPatientList().isEmpty()){
                for(Patient patient:po.getPatientDirectory().getPatientList()){
                    totalNumberofPatients=totalNumberofPatients+1;
                    float years=AgeCalculator.calculategetage(new Date(), patient.getDateOfBirth());
                    float months=AgeCalculator.getMonths(new Date(), patient.getDateOfBirth());
                    float monthsInYears=months/12;
                    ageList.add(Float.parseFloat(df.format(years+monthsInYears)));
                    analyticsPatientrList.add(patient);
                    totalAge=years+monthsInYears+totalAge;
                    if(patient.getGender().equals("Male")){
                        countOfMalePatients=countOfMalePatients+1;
                    }
                    if(patient.getGender().equals("Female")){
                        countOfFemalePatients=countOfFemalePatients+1;
                    }
                    if(patient.getGender().equals("Other")){
                        countOfOtherPatients=countOfOtherPatients+1;
                    }
                   }
                }
                
            }
        
        }
        } 
     boolean flag = true;
     float temp;
     Patient tempPatient;
     while(flag){
         flag = false;
         for(int j=0;j<totalNumberofPatients-1;j++){
                if(ageList.get(j)<ageList.get(j+1)){
                    temp=ageList.get(j);
                    ageList.set(j,ageList.get(j+1));
                    ageList.set(j+1, temp);

                    tempPatient=analyticsPatientrList.get(j);
                    analyticsPatientrList.set(j,analyticsPatientrList.get(j+1));
                    analyticsPatientrList.set(j+1, tempPatient);
                    flag=true;
                }

            }      
        } 
        
        
        
        
        
        //Initializing count list and group name list
        
        for(int i=0;i<11;i++){
            ageGroupCountList.add(0);
        }
        
        ageGroupNameList.add(0,"Age Group1 to 10" );
        ageGroupNameList.add(1,"Age Group11 to 20" );
        ageGroupNameList.add(2,"Age Group21 to 30" );
        ageGroupNameList.add(3,"Age Group31 to 40" );
        ageGroupNameList.add(4,"Age Group41 to 50" );
        ageGroupNameList.add(5,"Age Group51 to 60" );
        ageGroupNameList.add(6,"Age Group61 to 70" );
        ageGroupNameList.add(7,"Age Group71 to 80" );
        ageGroupNameList.add(8,"Age Group81 to 90" );
        ageGroupNameList.add(9,"Age Group91 to 100" );
        ageGroupNameList.add(10,"Age Group101 and above" );
        //sorting in age groups:
        
        for(float value:ageList){  
            int tempVal=0;
            for(int i=0;i<11;i++){
                 if(i==10){
                        if(value > groupMin[i]){
                            tempVal=ageGroupCountList.get(i)+1;
                            ageGroupCountList.set(i, tempVal);
                            break;
                        } 
                }
                     if(value>groupMin[i] && value<groupMax[i]){

                            tempVal=ageGroupCountList.get(i)+1;
                            ageGroupCountList.set(i, tempVal);
                            break;
                     }
             }
        }
        
        try{
        totalPatientsJTextField.setText(Integer.toString(totalNumberofPatients));
        avgAgeJTextField.setText(df.format(totalAge/totalNumberofPatients));
        lowestAgeJTextField.setText(Float.toString(ageList.get(ageList.size()-1)));
        highestAgeJTextField.setText(Float.toString(ageList.get(0)));
        malePatientsJTextField.setText(Integer.toString(countOfMalePatients));
        femalPatientsJTextField.setText(Integer.toString(countOfFemalePatients));
        otherPatientsjTextField.setText(Integer.toString(countOfOtherPatients));
        DefaultTableModel model=(DefaultTableModel)jTable1.getModel();
        model.setRowCount(0);
        jTable1.setRowSorter(new TableRowSorter(model));
        for(int i=0;i<11;i++){
            Object[] row = new Object[2];
                row[0] = ageGroupNameList.get(i);
                row[1] = ageGroupCountList.get(i);
                model.addRow(row);
        }
        }
        catch(Exception e){
            JOptionPane.showMessageDialog(null, "No Data Available to display.");
            totalPatientsJTextField.setText("");
            avgAgeJTextField.setText("");
            lowestAgeJTextField.setText("");
            highestAgeJTextField.setText("");
            malePatientsJTextField.setText("");
            femalPatientsJTextField.setText("");
            otherPatientsjTextField.setText("");
            return;
        }
        
    }
    
    public void generateAgeGroupBasedAnalytics(){
        ArrayList<Integer> cancerTypeCount=new ArrayList<>();
        ArrayList<String> cancerTypes = new ArrayList<>();
        cancerTypes.add(0,"Adrenal Cancer");
        cancerTypes.add(1,"Bile Duct Cancer");
        cancerTypes.add(2,"Bladder Cancer");
        cancerTypes.add(3,"Bone Cancer");
        cancerTypes.add(4,"Breast Cancer");
        cancerTypes.add(5,"Cervical Cancer");
        cancerTypes.add(6,"Colon/Rectum Cancer");
        cancerTypes.add(7,"Endometrial Cancer");
        cancerTypes.add(8,"Esophagus Cancer");
        cancerTypes.add(9,"Eye Cancer");
        cancerTypes.add(10,"Gallbladder Cancer");
        cancerTypes.add(11,"Kidney Cancer");
        cancerTypes.add(12,"Laryngeal and Hypopharyngeal Cancer");
        cancerTypes.add(13,"Liver Cancer");
        cancerTypes.add(14,"Lung Cancer");
        cancerTypes.add(15,"Nasal Cavity and Paranasal Sinus Cancer");
        cancerTypes.add(16,"Nasopharyngeal Cancer");
        cancerTypes.add(17,"Oral Cavity and Oropharyngeal Cancer");
        cancerTypes.add(18,"Ovarian Cancer");
        cancerTypes.add(19,"Pancreatic Cancer");
        cancerTypes.add(20,"Penile Cancer");
        cancerTypes.add(21,"Prostate Cancer");
        cancerTypes.add(22,"Salivary Gland Cancer");
        cancerTypes.add(23,"Skin Cancer");
        cancerTypes.add(24,"Small Intestine Cancer");
        cancerTypes.add(25,"Stomach Cancer");
        cancerTypes.add(26,"Testicular Cancer");
        cancerTypes.add(27,"Thymus Cancer");
        cancerTypes.add(28,"Thyroid Cancer");
        cancerTypes.add(29,"Uterine Sarcoma");
        cancerTypes.add(30,"Vaginal Cancer");
        cancerTypes.add(31,"Vulvar Cancer");


        
        for(int i=0;i<cancerTypes.size();i++){
            cancerTypeCount.add(0);
        }
        PatientOrganization po=null;
        
            if(!enterprise.getOrganizationDirectory().getOrganizationList().isEmpty()){
                for(Organization o:enterprise.getOrganizationDirectory().getOrganizationList()){
                    if(o instanceof PatientOrganization){
                        po=(PatientOrganization)o;
                        if(!po.getPatientDirectory().getPatientList().isEmpty()){
                            for(Patient patient:po.getPatientDirectory().getPatientList()){
                                for(String cancer:cancerTypes){
                                    if(patient.getTypeOfCancer().trim().equals(cancer)){
                                    int indexCount=cancerTypes.indexOf(cancer);
                                    
                                    int temp=1+cancerTypeCount.get(indexCount);
                                    cancerTypeCount.set(indexCount, temp);
                                    break;
                                }
                               }
                                
                                
                           }
                        }

                    }

                }
            }
        
        
        
        DefaultTableModel model=(DefaultTableModel)typeofcancerjTable.getModel();
        typeofcancerjTable.setRowSorter(new TableRowSorter(model));
        model.setRowCount(0);
        for(int i=0;i<cancerTypes.size();i++){
            Object[] row = new Object[2];
                row[0] = cancerTypes.get(i);
                row[1] = cancerTypeCount.get(i);
                model.addRow(row);
        }
}
    
    public void mostPrevalenetCancerForAnAgeGroup(){
         PatientOrganization po=null;
        int   [] groupMin = new int[]{0,10,20,30,40,50,60,70,80,90,100};
        int [] groupMax =new int[]{11,21,31,41,51,61,71,81,91,101};
        float value;
        if(!enterprise.getOrganizationDirectory().getOrganizationList().isEmpty()){
        for(Organization o:enterprise.getOrganizationDirectory().getOrganizationList()){
            if(o instanceof PatientOrganization){
                po=(PatientOrganization)o;
                if(!po.getPatientDirectory().getPatientList().isEmpty()){
                for(Patient patient:po.getPatientDirectory().getPatientList()){
                    
                    float years=AgeCalculator.calculategetage(new Date(), patient.getDateOfBirth());
                    float months=AgeCalculator.getMonths(new Date(), patient.getDateOfBirth());
                    float monthsInYears=months/12;
                    value=years+monthsInYears;
                    
                    if(value >100 ){
                            ageGroup_101_above.add(patient);
                             
                        } 
                    if(value>0 && value<11){
                        ageGroup_1_to_10.add(patient);
                        
                     }
                    if(value>10 && value<21){
                        ageGroup_11_to_20.add(patient);
                        
                     }
                    if(value>20 && value<31){
                        ageGroup_21_to_30.add(patient);
                        
                     }
                    if(value>30 && value<41){
                        ageGroup_31_to_40.add(patient);
                        
                        
                     }
                    if(value>40 && value<51){
                        ageGroup_41_to_50.add(patient);
                        
                     }
                    if(value>50 && value<61){
                        ageGroup_51_to_60.add(patient);
                        
                     }
                    if(value>60 && value<71){
                        ageGroup_61_to_70.add(patient);
                        
                     }
                    if(value>70 && value<81){
                        ageGroup_71_to_80.add(patient);
                        
                     }
                    if(value>80 && value<91){
                        ageGroup_81_to_90.add(patient);
                        
                     }
                    if(value>90 && value<101){
                        ageGroup_91_to_100.add(patient);
                        
                     }
                    
                   }
                }
                
            }
        
        }
        }
        
    }
    
    public void fillTableForAgeGroupSpecifCancer(ArrayList<Patient> list){
        ArrayList<Integer> cancerTypeCount=new ArrayList<>();
        ArrayList<String> cancerTypes = new ArrayList<>();
        cancerTypes.add(0,"Adrenal Cancer");
        cancerTypes.add(1,"Bile Duct Cancer");
        cancerTypes.add(2,"Bladder Cancer");
        cancerTypes.add(3,"Bone Cancer");
        cancerTypes.add(4,"Breast Cancer");
        cancerTypes.add(5,"Cervical Cancer");
        cancerTypes.add(6,"Colon/Rectum Cancer");
        cancerTypes.add(7,"Endometrial Cancer");
        cancerTypes.add(8,"Esophagus Cancer");
        cancerTypes.add(9,"Eye Cancer");
        cancerTypes.add(10,"Gallbladder Cancer");
        cancerTypes.add(11,"Kidney Cancer");
        cancerTypes.add(12,"Laryngeal and Hypopharyngeal Cancer");
        cancerTypes.add(13,"Liver Cancer");
        cancerTypes.add(14,"Lung Cancer");
        cancerTypes.add(15,"Nasal Cavity and Paranasal Sinus Cancer");
        cancerTypes.add(16,"Nasopharyngeal Cancer");
        cancerTypes.add(17,"Oral Cavity and Oropharyngeal Cancer");
        cancerTypes.add(18,"Ovarian Cancer");
        cancerTypes.add(19,"Pancreatic Cancer");
        cancerTypes.add(20,"Penile Cancer");
        cancerTypes.add(21,"Prostate Cancer");
        cancerTypes.add(22,"Salivary Gland Cancer");
        cancerTypes.add(23,"Skin Cancer");
        cancerTypes.add(24,"Small Intestine Cancer");
        cancerTypes.add(25,"Stomach Cancer");
        cancerTypes.add(26,"Testicular Cancer");
        cancerTypes.add(27,"Thymus Cancer");
        cancerTypes.add(28,"Thyroid Cancer");
        cancerTypes.add(29,"Uterine Sarcoma");
        cancerTypes.add(30,"Vaginal Cancer");
        cancerTypes.add(31,"Vulvar Cancer");


        
        for(int i=0;i<cancerTypes.size();i++){
            cancerTypeCount.add(0);
        }
        
        if(!list.isEmpty()){
                            for(Patient patient:list){
                                for(String cancer:cancerTypes){
                                    if(patient.getTypeOfCancer().trim().equals(cancer)){
                                    int indexCount=cancerTypes.indexOf(cancer);
                                    
                                    int temp=1+cancerTypeCount.get(indexCount);
                                    cancerTypeCount.set(indexCount, temp);
                                    break;
                                }
                               }
                                
                                
                           }
                        }

                    

                            
        
        
        
        DefaultTableModel model=(DefaultTableModel)ageGroupSpecificCancer.getModel();
        ageGroupSpecificCancer.setRowSorter(new TableRowSorter(model));
        
       
        model.setRowCount(0);
        for(int i=0;i<cancerTypes.size();i++){
            Object[] row = new Object[2];
                row[0] = cancerTypes.get(i);
                row[1] = cancerTypeCount.get(i);
                model.addRow(row);
        }
        
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable ageGroupSpecificCancer;
    private javax.swing.JTextField avgAgeJTextField;
    private javax.swing.JButton backjButton1;
    private javax.swing.JTextField femalPatientsJTextField;
    private javax.swing.JTextField highestAgeJTextField;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField lowestAgeJTextField;
    private javax.swing.JTextField malePatientsJTextField;
    private javax.swing.JTextField otherPatientsjTextField;
    private javax.swing.JTextField totalPatientsJTextField;
    private javax.swing.JTable typeofcancerjTable;
    // End of variables declaration//GEN-END:variables
}
