/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.PatientRole;

import Business.Patient.Patient;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.AppointmentRequest;
import Business.WorkQueue.WorkRequest;

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;
import net.glxn.qrgen.QRCode;
import net.glxn.qrgen.image.ImageType;

/**
 *
 * @author Saurabh
 */
public class UpcomingAppointment extends javax.swing.JPanel {

    /**
     * Creates new form UpcomingAppointment
     */
    private Patient patient;
    private UserAccount userAccount;
    public UpcomingAppointment(Patient patient,UserAccount userAccount) {
        initComponents();
        this.patient=patient;
        this.userAccount=userAccount;
         populateupcomingAppointmentjTable1();
    }

    public void populateupcomingAppointmentjTable1(){
        
         DefaultTableModel model = (DefaultTableModel) upcomingAppointmentjTable1.getModel();
        upcomingAppointmentjTable1.setRowSorter(new TableRowSorter(model));
        model.setRowCount(0);
        for (WorkRequest request :userAccount.getWorkQueue().getWorkRequestList()){
            if(request instanceof AppointmentRequest){
                if(!request.getStatus().equals("Appointment Completed")){
                    AppointmentRequest req=(AppointmentRequest)request;
                    Object[] row = new Object[5];
                    row[0] = req;
                    row[1] = req.getDoctor();
                    row[2] = req.getDateOfAppointment();
                    row[3] = req.getTimeofAppointment();
                    model.addRow(row);
                }
            
            }
            
        }
        
        
        
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        upcomingAppointmentjTable1 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        qrCpdejLabel = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));

        upcomingAppointmentjTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Appointment ID", "Doctor", "Date Due", "Time"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(upcomingAppointmentjTable1);

        jButton1.setBackground(new java.awt.Color(0, 0, 0));
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/userinterface/Icons/qr-code-icon.png"))); // NOI18N
        jButton1.setText("Generate QR");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        qrCpdejLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        qrCpdejLabel.setText("QR Code");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 422, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(36, 36, 36)
                        .addComponent(qrCpdejLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jButton1))
                .addContainerGap(67, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(qrCpdejLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 140, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap(24, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        int selectedRow=upcomingAppointmentjTable1.getSelectedRow();
        if(selectedRow<0){
            JOptionPane.showMessageDialog(null,"Select an appointment to generate QR code");
            return;
        }else{
            AppointmentRequest req=(AppointmentRequest)upcomingAppointmentjTable1.getValueAt(selectedRow, 0);
            String requestId= req.toString();
            String doctor = req.getDoctor().toString();
            String date = req.getDateOfAppointment();
            String time = req.getTimeofAppointment();
            String detailsForQR="Appointment ID - " + requestId +"\n Doctor - "+doctor+"\nDate of Appointment - " + date+"\nTime - " + time;
            generateQR(detailsForQR);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

public void generateQR(String details){
        ByteArrayOutputStream out = QRCode.from(details).to(ImageType.PNG).stream();
        try {
            
            FileOutputStream fout = new FileOutputStream(new File("C:\\Users\\Saurabh\\Desktop\\QRcode\\QR_Code.JPG"));
            fout.write(out.toByteArray());
            fout.flush();
            fout.close();
            //ImageIcon icon=new ImageIcon(fout.toString());
            qrCpdejLabel.setIcon(new ImageIcon(out.toByteArray()));
        } catch (FileNotFoundException e) {
            // Do Logging
        } catch (IOException e) {
            // Do Logging
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel qrCpdejLabel;
    private javax.swing.JTable upcomingAppointmentjTable1;
    // End of variables declaration//GEN-END:variables
}
