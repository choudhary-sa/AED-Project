/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.ReceptionistRole;


import Business.EcoSystem;
import Business.Employee.Employee;
import Business.Enterprise.Enterprise;
import Business.Organization.Organization;

import Business.Organization.PatientOrganization;
import Business.Organization.ReceptionistOrganization;
import Business.Patient.Patient;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.AppointmentRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;
import com.textmagic.sms.TextMagicMessageService;
import com.textmagic.sms.exception.ServiceException;
import java.io.ByteArrayOutputStream;
import java.io.PrintStream;


/**
 *
 * @author Saurabh
 */
public class ConfirmAppointmentJPanel extends javax.swing.JPanel {

    /**
     * Creates new form ConfirmAppointmentJPanel
     */
    private JPanel userProcessContainer;
    private Enterprise enterprise;
    private Date todayDate=new Date();
    private PatientOrganization patientOrganization;
    private ReceptionistOrganization receptionistOrganization;
    private EcoSystem business;
    public ConfirmAppointmentJPanel(JPanel userProcessContainer,PatientOrganization patientOrganization,Enterprise enterprise,EcoSystem business) {
        initComponents();
        this.userProcessContainer=userProcessContainer;
        this.enterprise=enterprise;
        this.business=business;
        this.patientOrganization=patientOrganization;
        if(!patientOrganization.getPatientDirectory().getPatientList().isEmpty()){
            if(!(patientOrganization.getUserAccountDirectory().getUserAccountList().isEmpty())){
                populatePatientTable();
            }else{
                refreshTable();
            }
            
        }else{
            refreshTable();
        }
        for(Organization org:enterprise.getOrganizationDirectory().getOrganizationList()){
            if(org instanceof ReceptionistOrganization){
                receptionistOrganization=(ReceptionistOrganization)org;
                break;
            }
        }
        populaterecpOrgWorkQueueJTable();
    }
    public void refreshTable(){
        DefaultTableModel model = (DefaultTableModel) patientJTable.getModel();
        patientJTable.setRowSorter(new TableRowSorter(model));
        model.setRowCount(0);
        
    }
    public void populaterecpOrgWorkQueueJTable(){
        DefaultTableModel model = (DefaultTableModel) recpOrgWorkQueueJTable.getModel();
        recpOrgWorkQueueJTable.setRowSorter(new TableRowSorter(model));
        model.setRowCount(0);
        for (WorkRequest request :receptionistOrganization.getWorkQueue().getWorkRequestList()){
            AppointmentRequest req=(AppointmentRequest)request;
            Object[] row = new Object[8];
            row[0] = req;
            row[1] = request.getRequestDate();
            row[2] = request.getSender();
            row[3] = request.getMessage();
            row[4] = req.getDateOfAppointment();
            row[5] = req.getTimeofAppointment();
            row[6] = request.getStatus();
            //row[6] = request.getReceiver();
            //row[7] = request.getResolveDate();
            model.addRow(row);
        }
    } 
    
    
    public void populatePatientTable(){
        DefaultTableModel model = (DefaultTableModel) patientJTable.getModel();
        patientJTable.setRowSorter(new TableRowSorter(model));
        model.setRowCount(0);
        for (UserAccount  ua :patientOrganization.getUserAccountDirectory().getUserAccountList()){
            Patient p=null;
            for(Patient patient:patientOrganization.getPatientDirectory().getPatientList()){
                if(patient.equals((Patient)ua.getEmployee())){
                    p=patient;
                    break;
                }
            }
            Object[] row = new Object[4];
            row[0] = ua;
            row[1] = p;
            row[2] = p.getId();
            row[3] = p.getStringDOB();
            
            model.addRow(row);
        } 
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        buttonGroup3 = new javax.swing.ButtonGroup();
        jScrollPane1 = new javax.swing.JScrollPane();
        patientJTable = new javax.swing.JTable();
        searchDonorJText = new javax.swing.JTextField();
        searchDonorJButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jCalendar1 = new com.toedter.calendar.JCalendar();
        jLabel3 = new javax.swing.JLabel();
        requestIDJText = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        refreshJButton = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        recpOrgWorkQueueJTable = new javax.swing.JTable();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 255));
        setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Confirm Appointment", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 18))); // NOI18N

        patientJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Patient User Account", "Patient", "Patient ID", "Date Of Birth"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(patientJTable);

        searchDonorJButton.setBackground(new java.awt.Color(0, 0, 0));
        searchDonorJButton.setForeground(new java.awt.Color(255, 255, 255));
        searchDonorJButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/userinterface/Icons/Other-Search-alt-Metro-icon.png"))); // NOI18N
        searchDonorJButton.setText("Search Patient");
        searchDonorJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchDonorJButtonActionPerformed(evt);
            }
        });

        jLabel1.setText("Select Date from Calendar:");

        jLabel2.setText("Time:");

        jButton1.setBackground(new java.awt.Color(0, 0, 0));
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/userinterface/Icons/confirmed.png"))); // NOI18N
        jButton1.setText("Confirm Appointment");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setBackground(new java.awt.Color(0, 0, 0));
        jButton2.setForeground(new java.awt.Color(255, 255, 255));
        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/userinterface/Icons/arrow-back-icon.png"))); // NOI18N
        jButton2.setText("Back");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jCalendar1.setBackground(new java.awt.Color(0, 0, 0));
        jCalendar1.setForeground(new java.awt.Color(255, 255, 255));
        jCalendar1.setTodayButtonVisible(true);

        jLabel3.setText("Request ID");

        jList1.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "09:00 AM", "09:30 AM", "10:00 AM", "10:30 AM", "11:00 AM", "11:30 AM", "12:00 PM", "12:30 PM", "01:00 PM", "01:30 PM", "02:00 PM", "02:30 PM", "03:00 PM", "03:30 PM", "04:00 PM", "04:30 PM", "05:00 PM", "05:30 PM", "06:00 PM", "06:30 PM", "07:00 PM" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jList1.setSelectionBackground(new java.awt.Color(50, 255, 149));
        jScrollPane2.setViewportView(jList1);

        refreshJButton.setBackground(new java.awt.Color(0, 0, 0));
        refreshJButton.setForeground(new java.awt.Color(255, 255, 255));
        refreshJButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/userinterface/Icons/clear_refresh_Other-Power-Restart-Metro-icon.png"))); // NOI18N
        refreshJButton.setText("Refresh");
        refreshJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshJButtonActionPerformed(evt);
            }
        });

        recpOrgWorkQueueJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Req", "Request Date", "From Patient", "Message", "Appntt Date Requested", "Appnt Time", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(recpOrgWorkQueueJTable);

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel7.setText("Confirm Appointments");

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel8.setText("Appointment Requested");

        jButton3.setBackground(new java.awt.Color(0, 0, 0));
        jButton3.setForeground(new java.awt.Color(255, 255, 255));
        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/userinterface/Icons/mark-as-processed.png"))); // NOI18N
        jButton3.setText("Mark as Processed");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addComponent(jLabel3)
                                    .addGap(42, 42, 42)
                                    .addComponent(requestIDJText, javax.swing.GroupLayout.PREFERRED_SIZE, 342, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                            .addComponent(jButton1)
                                            .addGap(0, 0, Short.MAX_VALUE))
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(jCalendar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(jLabel2)
                                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                    .addGap(75, 75, 75)))
                            .addGap(176, 176, 176))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(searchDonorJButton)
                                .addGap(18, 18, 18)
                                .addComponent(searchDonorJText)
                                .addGap(18, 18, 18)
                                .addComponent(refreshJButton))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 612, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jLabel1)
                    .addComponent(jLabel7)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addComponent(jLabel8)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton3))
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 765, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(47, 47, 47))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(jButton3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(41, 41, 41)
                .addComponent(jLabel7)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchDonorJButton)
                    .addComponent(searchDonorJText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(refreshJButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(requestIDJText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addComponent(jCalendar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jButton1)
                .addGap(18, 18, 18)
                .addComponent(jButton2)
                .addGap(25, 25, 25))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void searchDonorJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchDonorJButtonActionPerformed
        // TODO add your handling code here:
        String keyWord = searchDonorJText.getText().trim();
        refreshPatientTable(keyWord);
    }//GEN-LAST:event_searchDonorJButtonActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        
        userProcessContainer.remove(this.getParent().getParent());
        userProcessContainer.remove(this.getParent());
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout)userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        int selectedRow=patientJTable.getSelectedRow();
         if (selectedRow < 0){
             JOptionPane.showMessageDialog(null, "Please select patient for which appointment is needed.", "Info", JOptionPane.INFORMATION_MESSAGE);
            return;
        }else{
             UserAccount patientAccount=(UserAccount)patientJTable.getValueAt(selectedRow, 0);
             Patient patient=(Patient)patientJTable.getValueAt(selectedRow, 1);
             
             
             DateFormat formatter = new SimpleDateFormat("YYYY ,MM ,dd");
             
             String date=formatter.format(jCalendar1.getDate());
             Date inputDate=jCalendar1.getDate();
             boolean isdate=inputDate.before(todayDate);
             if(isdate){
                 JOptionPane.showMessageDialog(null, "Please select  future date.", "Info", JOptionPane.INFORMATION_MESSAGE);
                 return;
             }
             try{
                 jList1.getSelectedValue().toString();}
             catch(Exception e){
                 JOptionPane.showMessageDialog(null, "Select Time for appointment", "Info", JOptionPane.INFORMATION_MESSAGE);
                 return;
             }
             String listedTime=jList1.getSelectedValue().toString();
             if(requestIDJText.getText().trim().length()==0){
                 JOptionPane.showMessageDialog(null, "Enter Request id.", "Info", JOptionPane.INFORMATION_MESSAGE);
                 return;
             }else{
                 AppointmentRequest request=new AppointmentRequest(patientAccount,patient.getAssociatedDoctor());
                 request.setDateOfAppointment(date);
                 request.setStatus("Appointment Due.");
                 request.setTimeofAppointment(listedTime);
                 request.setAppointmentRequestID(requestIDJText.getText().trim());
                 
//Request added tp patient and doctor work queue.
                 patientAccount.getWorkQueue().getWorkRequestList().add(request);
                 UserAccount doctor=patient.getAssociatedDoctor();
                 doctor.getWorkQueue().getWorkRequestList().add(request);
                 
                 String smsMessage="Dear "+patient.getFirstName()+ ","+"\n"+" Appointment ID-"+request.getAppointmentRequestID()+" confirmed.Due on "+date +"(YYYY/MM/DD) at "+listedTime+"\nRegards,\n"+"Saurabh Choudhary";
                 TextMagicMessageService service =new TextMagicMessageService("saurabhchoudhary","yXeXg755EO");
                 PrintStream oldErr = System.err;
                 PrintStream newErr = new PrintStream(new ByteArrayOutputStream());
                 System.setErr(newErr);
                 try{
                     service.send(smsMessage, "1"+patient.getContactNumber());
                     
                 }catch(ServiceException se){
                     JOptionPane.showMessageDialog(null," Failed to send Message");
                 }   
                System.setErr(oldErr);
        
                 
                 
      
                 
                 JOptionPane.showMessageDialog(null, "Appointment is confirmed", "Info", JOptionPane.INFORMATION_MESSAGE);
                 clearfields();
             }
             
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void refreshJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshJButtonActionPerformed
        // TODO add your handling code here:
        clearfields();
    }//GEN-LAST:event_refreshJButtonActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
         int selectedRow=recpOrgWorkQueueJTable.getSelectedRow();
         if (selectedRow < 0){
             JOptionPane.showMessageDialog(null, "Please select  appointment to be marked as processed.", "Info", JOptionPane.INFORMATION_MESSAGE);
            return;
        }else{
         AppointmentRequest aptreq=(AppointmentRequest)recpOrgWorkQueueJTable.getValueAt(selectedRow, 0);
         if(aptreq.getStatus().equals("Confirmed.")){
             JOptionPane.showMessageDialog(null,"Already processed");
             return;
         }
         else{
             aptreq.setReceiver(null);
         aptreq.setResolveDate(new Date());
         aptreq.setStatus("Confirmed.");
         populaterecpOrgWorkQueueJTable();
         }
         
         }
    }//GEN-LAST:event_jButton3ActionPerformed

    public void clearfields(){
        searchDonorJText.setText("");
        populatePatientTable();
        requestIDJText.setText("");
        jList1.clearSelection();
    }
public void refreshPatientTable(String keyWord){
    int rowCount = patientJTable.getRowCount();
        DefaultTableModel dtm = (DefaultTableModel) patientJTable.getModel();
        patientJTable.setRowSorter(new TableRowSorter(dtm));
        for (int i = rowCount - 1; i >= 0; i--) {
            dtm.removeRow(i);
        }
        String fullname;
      
        //dtm.setRowCount(0);
        for (Patient s : patientOrganization.getPatientDirectory().getPatientList()) {
            fullname=s.toString();
            
                    
            if (fullname.contains(keyWord)) {
                Patient p=s;
                UserAccount u=null;
                for(UserAccount ua:patientOrganization.getUserAccountDirectory().getUserAccountList()){
                    if(ua.getEmployee().equals((Employee)p)){
                        u=ua;
                        break;
                    }
                }
                Object[] row = new Object[4];
                row[0] = u;
                row[1] = p;
                row[2] = p.getId();
                row[3] = p.getStringDOB();
                dtm.addRow(row);
           }
            
       
     }
}
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.ButtonGroup buttonGroup3;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private com.toedter.calendar.JCalendar jCalendar1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JList jList1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable patientJTable;
    private javax.swing.JTable recpOrgWorkQueueJTable;
    private javax.swing.JButton refreshJButton;
    private javax.swing.JTextField requestIDJText;
    private javax.swing.JButton searchDonorJButton;
    private javax.swing.JTextField searchDonorJText;
    // End of variables declaration//GEN-END:variables
}
