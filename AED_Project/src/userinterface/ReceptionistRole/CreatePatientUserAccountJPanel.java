/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.ReceptionistRole;


import Business.EcoSystem;
import Business.Employee.Employee;
import Business.Enterprise.Enterprise;
import Business.Enterprise.EnterpriseDirectory;
import Business.Network.Network;

import javax.mail.*;
import javax.mail.PasswordAuthentication;
import java.util.Properties;
import javax.mail.Message;
import Business.Organization.Organization;
import Business.Organization.PatientOrganization;
import Business.Patient.Patient;
import Business.Role.PatientRole;
import Business.UserAccount.UserAccount;
import java.awt.CardLayout;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeMessage;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;
//import sendmail.Sendmail;

/**
 *
 * @author Saurabh
 */
public class CreatePatientUserAccountJPanel extends javax.swing.JPanel {

    /**
     * Creates new form CreatePatientUserAccountJPanel
     */
    private JPanel userProcessContainer;
    private UserAccount userAccount;
    private Enterprise enterprise;
    
    private PatientOrganization patientOrganization;
    private EcoSystem business;
    public CreatePatientUserAccountJPanel(JPanel userProcessContainer, UserAccount userAccount, Enterprise enterprise,EcoSystem business) {
        initComponents();
        this.business=business;
        this.userAccount=userAccount;
        this.userProcessContainer=userProcessContainer;
        this.enterprise=enterprise;
        for(Organization org:this.enterprise.getOrganizationDirectory().getOrganizationList()){
            if(org instanceof PatientOrganization){
                patientOrganization=(PatientOrganization)org;
                break;
            }
        }
        
        populatePatientJTable();
        populateAccountTable();
        jLabel4.setText(enterprise.getName());
        
    }
    public void  populateAccountTable(){
         DefaultTableModel model = (DefaultTableModel) accountjTable1.getModel();
        accountjTable1.setRowSorter(new TableRowSorter(model));
        model.setRowCount(0);
        for (UserAccount  p :patientOrganization.getUserAccountDirectory().getUserAccountList()){
            Object[] row = new Object[3];
            row[0] = p;
            row[1] = p.getEmployee().getId();
            row[2] = p.getEmployee();            
            model.addRow(row);
        } 
        
    }
    public void populatePatientJTable(){
        
        DefaultTableModel model = (DefaultTableModel) patientJTable.getModel();
        patientJTable.setRowSorter(new TableRowSorter(model));
        model.setRowCount(0);
        for (Patient  p :patientOrganization.getPatientDirectory().getPatientList()){
            Object[] row = new Object[3];
            row[0] = p;
            row[1] = p.getId();
            row[2] = p.getStringDOB();
            model.addRow(row);
        }  
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton2 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        searchDonorJButton = new javax.swing.JButton();
        searchDonorJText = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        patientJTable = new javax.swing.JTable();
        nameJTextField = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        passwordJTextField = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        accountjTable1 = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        searchDonorJButton1 = new javax.swing.JButton();
        searchDonorJText1 = new javax.swing.JTextField();
        jButton3 = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 255));
        setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder(null, "Create Patient User Account", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 20)))); // NOI18N

        jButton2.setBackground(new java.awt.Color(0, 0, 0));
        jButton2.setForeground(new java.awt.Color(255, 255, 255));
        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/userinterface/Icons/arrow-back-icon.png"))); // NOI18N
        jButton2.setText("Back");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton1.setBackground(new java.awt.Color(0, 0, 0));
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/userinterface/Icons/create-account-Apps-Live-Messenger-Metro-icon.png"))); // NOI18N
        jButton1.setText("Create Account");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel4.setText("jLabel4");

        searchDonorJButton.setBackground(new java.awt.Color(0, 0, 0));
        searchDonorJButton.setForeground(new java.awt.Color(255, 255, 255));
        searchDonorJButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/userinterface/Icons/Other-Search-alt-Metro-icon.png"))); // NOI18N
        searchDonorJButton.setText("Search Patient");
        searchDonorJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchDonorJButtonActionPerformed(evt);
            }
        });

        patientJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Patient", "Patient ID", "Date Of Birth"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(patientJTable);

        jLabel5.setText("User Name");

        jLabel6.setText("Password");

        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel7.setText("Search the Patient in the table first and then select it. Then provide username and password to ");
        jLabel7.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        jLabel3.setText("create the account for selected Patient.");

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setText("Enterprise");

        accountjTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Account", "id", "Employee"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(accountjTable1);

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setText("Existing Accounts");

        searchDonorJButton1.setBackground(new java.awt.Color(0, 0, 0));
        searchDonorJButton1.setForeground(new java.awt.Color(255, 255, 255));
        searchDonorJButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/userinterface/Icons/Other-Search-alt-Metro-icon.png"))); // NOI18N
        searchDonorJButton1.setText("Search Patient");
        searchDonorJButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchDonorJButton1ActionPerformed(evt);
            }
        });

        jButton3.setBackground(new java.awt.Color(0, 0, 0));
        jButton3.setForeground(new java.awt.Color(255, 255, 255));
        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/userinterface/Icons/clear_refresh_Other-Power-Restart-Metro-icon.png"))); // NOI18N
        jButton3.setText("Refresh Tables");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel5)
                                            .addComponent(jLabel6))
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(nameJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 246, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(passwordJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 246, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jButton1)))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(0, 0, Short.MAX_VALUE)))
                                .addGap(208, 208, 208))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(searchDonorJButton)
                                        .addGap(34, 34, 34)
                                        .addComponent(searchDonorJText)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(searchDonorJButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(searchDonorJText1))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 393, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton3, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addGap(113, 113, 113))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel4))
                            .addComponent(jLabel7))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel2)
                        .addGap(384, 384, 384))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel1))
                .addGap(18, 18, 18)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(searchDonorJButton1)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(2, 2, 2)
                            .addComponent(searchDonorJText1)))
                    .addComponent(searchDonorJButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(searchDonorJText))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 142, Short.MAX_VALUE))
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(nameJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton3))
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(passwordJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jButton1)
                .addGap(18, 18, 18)
                .addComponent(jButton2)
                .addGap(126, 126, 126))
        );

        jLabel7.getAccessibleContext().setAccessibleName("Search the Patient in the table first and then select it. Then provide username and password\nto create the account for selected Patient.");
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this.getParent().getParent());
        userProcessContainer.remove(this.getParent());
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout)userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        String userName = nameJTextField.getText().trim();
        String password = passwordJTextField.getText().trim();
        int selectedRow=patientJTable.getSelectedRow();
         if (selectedRow < 0){
             JOptionPane.showMessageDialog(null, "Please select a row.", "Info", JOptionPane.INFORMATION_MESSAGE);
            return;
        }else{
         Patient patient=(Patient)patientJTable.getValueAt(selectedRow,0);
         Employee e=(Employee)patient;
         boolean userNameIsUnique=false;
        if(userName.length()==0|| password.length()==0){
                JOptionPane.showMessageDialog(null, "Enter Valid user name and/or password.", "Info", JOptionPane.INFORMATION_MESSAGE);
                return;
            }
            else{
            
                for(Network n:business.getNetworkList()){
                     JOptionPane.showMessageDialog(null, n);
                        EnterpriseDirectory ed=n.getEnterpriseDirectory();
                            for(Enterprise en:ed.getEnterpriseList()){
                                
                                //If enterprise user account list is not empty do this.
                                        if(!en.getUserAccountDirectory().getUserAccountList().isEmpty()){
                                            userNameIsUnique=en.getUserAccountDirectory().checkIfUsernameIsUnique(userName);
                                            //if username is found in Enterprise list: check in containing organizations:
                                            if(userNameIsUnique==true){
                                                if(!en.getOrganizationDirectory().getOrganizationList().isEmpty()){
                                                    for(Organization o:en.getOrganizationDirectory().getOrganizationList()){
                                                        if(!o.getUserAccountDirectory().getUserAccountList().isEmpty()){
                                                            userNameIsUnique=o.getUserAccountDirectory().checkIfUsernameIsUnique(userName);
                                                            if(userNameIsUnique==false){
                                                            JOptionPane.showMessageDialog(null, "Username already assigned to other employee in the system in Enterprise "+ e +",Organization "+o+".Please use some othe user id.", "Info", JOptionPane.INFORMATION_MESSAGE);
                                                            break;
                                                            }
                                                       }else{
                                                            userNameIsUnique=true;
                                                       }
                                                    }
                                                }else{
                                                            userNameIsUnique=true;
                                                       }
                                            }else{
                                                userNameIsUnique=false;
                                                JOptionPane.showMessageDialog(null,"User Account already Assigned.");
                                                break;
                                            }
                                        
                                        }//If enterprise user list is not empty part ends
                                        
                                        
                                        //if enterprise user list is empty check in orgs
                                        else{
                                                if(!en.getOrganizationDirectory().getOrganizationList().isEmpty()){

                                                            for(Organization o:en.getOrganizationDirectory().getOrganizationList()){

                                                                if(!o.getUserAccountDirectory().getUserAccountList().isEmpty()){
                                                                    userNameIsUnique=o.getUserAccountDirectory().checkIfUsernameIsUnique(userName);
                                                                    if(userNameIsUnique==false){
                                                                    JOptionPane.showMessageDialog(null, "Username already assigned to other employee in the system in Enterprise "+ en +",Organization "+o+".Please use some othe user id.", "Info", JOptionPane.INFORMATION_MESSAGE);
                                                                    break;
                                                                    }
                                                                }else{
                                                                    userNameIsUnique=true;
                                                                }
                                                            }
                                                }else{
                                                    userNameIsUnique=true;
                                                }
                                        }if(userNameIsUnique==false){
                                                break;
                                            }//If enterprise user list is empty part ends
                                        
                              }if(userNameIsUnique==false){
                              break;
                              }//Enterprise Directory loop ends
                            
                            
                }///Network Loop ends
        
        if(userNameIsUnique){            
            UserAccount ua=patientOrganization.getUserAccountDirectory().createUserAccount(userName, password,e, new PatientRole());
            nameJTextField.setText("");
            passwordJTextField.setText("");

            String toEmail=ua.getEmployee().getEmailAddress();
           sendAccountDetailsMail(toEmail,ua.getUsername(),ua.getPassword(),ua.getEmployee().getFirstName(),patient.getStringDOB());
            
            JOptionPane.showMessageDialog(null, "User Account created.", "Info", JOptionPane.INFORMATION_MESSAGE);
            backbutton();
        }
        
        
        }
       }
    }//GEN-LAST:event_jButton1ActionPerformed
public void sendAccountDetailsMail(String toEmail,String userName,String password,String firstName,String dob){
// "Your Date of birth as per our records is "+dob+"."+
    String messageContent="Dear "+firstName+","+"\n"+"\n"+"Hope you are doing well!"+"\n"+"\n"+"Your account details are as below\n"+"\n"+"User Name is :"+userName+"\n"+"Password is :"+password+"\n"+"Your Date of birth as per our records is "+dob+"."+"\n"+"\n"+"In case of any issues/corrections,please write back to us at aed.project.application@gmail.com"+"\n"+"\n"+"Thanks and Regards"+"\n"+"\n"+ userAccount.getEmployee().getFirstName()+" "+userAccount.getEmployee().getLastName();
    Properties props=new Properties();
    props.put("mail.smtp.host", "smtp.gmail.com");
    props.put("mail.smtp.socketFactory.port", "465");
    props.put("mail.smtp.socketFactory.class","javax.net.ssl.SSLSocketFactory");
     props.put("mail.smtp.auth","true");
     props.put("mail.smtp.port","465");
     
     Session session=Session.getDefaultInstance(props,
             new javax.mail.Authenticator() {
             protected PasswordAuthentication getPasswordAuthentication(){
                 return new PasswordAuthentication("aed.project.application@gmail.com","AedProjectMail@2015");
                }
             }
             );
     try{
         Message message=new MimeMessage(session);
         message.setFrom(new InternetAddress("choudhary.sa@husky.neu.edu"));
         message.setRecipients(Message.RecipientType.TO, InternetAddress.parse(toEmail));
         message.setSubject("Account Login Details");
         message.setText(messageContent);
         Transport.send(message);
         JOptionPane.showMessageDialog(null, "An email has been sent to user with user login details");
     }catch(Exception e){
     JOptionPane.showMessageDialog(null, e);
     }
    

}
    private void searchDonorJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchDonorJButtonActionPerformed
        // TODO add your handling code here:
        String keyWord = searchDonorJText.getText().trim();
        refreshPatientTable(keyWord);
    }//GEN-LAST:event_searchDonorJButtonActionPerformed

    private void searchDonorJButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchDonorJButton1ActionPerformed
        // TODO add your handling code here:
        String keyWord = searchDonorJText1.getText().trim();
        refreshAccountTable(keyWord);
    }//GEN-LAST:event_searchDonorJButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        populatePatientJTable();
        populateAccountTable();
        searchDonorJText.setText("");
        searchDonorJText1.setText("");
    }//GEN-LAST:event_jButton3ActionPerformed
    public void refreshAccountTable(String keyword){
        int rowCount = accountjTable1.getRowCount();
        DefaultTableModel dtm = (DefaultTableModel) accountjTable1.getModel();
        accountjTable1.setRowSorter(new TableRowSorter(dtm));
        for (int i = rowCount - 1; i >= 0; i--) {
            dtm.removeRow(i);
        }
        String fullname;
        //dtm.setRowCount(0);
        if(!patientOrganization.getPatientDirectory().getPatientList().isEmpty()){
        
        for (Patient s : patientOrganization.getPatientDirectory().getPatientList()) {
            fullname=s.getFirstName()+" "+s.getLastName();
            if (fullname.contains(keyword)) {
                    Object row[] = new Object[2];
                    row[0] = s;
                    row[1] = s.getId();
                    dtm.addRow(row);
                }
            
        }
        
        }
        
    }
    
    
    public void refreshPatientTable(String keyword){
        int rowCount = patientJTable.getRowCount();
        DefaultTableModel dtm = (DefaultTableModel) patientJTable.getModel();
        patientJTable.setRowSorter(new TableRowSorter(dtm));
        for (int i = rowCount - 1; i >= 0; i--) {
            dtm.removeRow(i);
        }
        String fullname;
        //dtm.setRowCount(0);
        for (Patient s : patientOrganization.getPatientDirectory().getPatientList()) {
            fullname=s.getFirstName()+" "+s.getLastName();
            if (fullname.contains(keyword)) {
                    Object row[] = new Object[2];
                    row[0] = s;
                    row[1] = s.getId();
                    dtm.addRow(row);
                }
            
        }
    }
    public void backbutton(){
        
        userProcessContainer.remove(this.getParent().getParent());
        userProcessContainer.remove(this.getParent());
        userProcessContainer.remove(this);
        
        
        
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable accountjTable1;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField nameJTextField;
    private javax.swing.JTextField passwordJTextField;
    private javax.swing.JTable patientJTable;
    private javax.swing.JButton searchDonorJButton;
    private javax.swing.JButton searchDonorJButton1;
    private javax.swing.JTextField searchDonorJText;
    private javax.swing.JTextField searchDonorJText1;
    // End of variables declaration//GEN-END:variables
}
