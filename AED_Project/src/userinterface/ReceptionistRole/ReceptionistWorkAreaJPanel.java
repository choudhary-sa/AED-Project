/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.ReceptionistRole;

import Business.Community.CommunityProfile;
import Business.EcoSystem;
import Business.Employee.Employee;
import Business.Enterprise.Enterprise;

import Business.Organization.Organization;
import Business.Organization.PatientOrganization;
import Business.Organization.ReceptionistOrganization;
import Business.Patient.Patient;
import Business.UserAccount.UserAccount;
import Business.Utils.AgeCalculator;
import java.awt.CardLayout;
import static java.lang.Thread.sleep;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author Saurabh
 */
public class ReceptionistWorkAreaJPanel extends javax.swing.JPanel {

    /**
     * Creates new form ReceptionistWorkAreaJPanel
     */
    private JPanel userProcessContainer;
    private Enterprise enterprise;
    private EcoSystem business;
    private UserAccount userAccount;
    private PatientOrganization patientOrganization;
    private  ReceptionistOrganization receptionistOrganization;
    public ReceptionistWorkAreaJPanel(JPanel userProcessContainer, UserAccount account, Organization organization,Enterprise enterprise, EcoSystem business) {
        initComponents();
        currentDateAndTime();
        this.userProcessContainer = userProcessContainer;
        this.userAccount = account;
        this.business = business;
        this.enterprise=enterprise;
        this.receptionistOrganization = (ReceptionistOrganization)organization;
       for(Organization  org:enterprise.getOrganizationDirectory().getOrganizationList()){
           if(org instanceof  PatientOrganization){
               patientOrganization=(PatientOrganization) org;
               break;
           }
       }
       
        jLabel2.setText(enterprise.getName());
        populatePatientJTable();
        
    }
    
    public void currentDateAndTime(){
        
        Thread clock=new Thread(){
            public void run(){
                for(;;){
                    Calendar calender=new GregorianCalendar();
        int month=calender.get(Calendar.MONTH);
        int year=calender.get(Calendar.YEAR);
        int day=calender.get(Calendar.DAY_OF_MONTH);
        String dateText=(month+1)+"/"+day+"/"+year;
        
        int second=calender.get(Calendar.SECOND);
        int minute=calender.get(Calendar.MINUTE);
        int hour=calender.get(Calendar.HOUR);
        int timePeriod=calender.get(Calendar.AM_PM);
        String clockformat;
        if(timePeriod==0){
            clockformat="AM";
        }else{
            clockformat="PM";
        }
        String timeText=hour+":"+minute+":"+(second+1)+" "+clockformat;
        
        
        String dateAndTime=dateText+"  "+timeText;
        dateAndTimeJLabel1.setText(dateAndTime);
                    try{
                        sleep(1000);
                    }catch(InterruptedException e){
                        
                    }
                }
            }
        };
        clock.start();
    }
    
    public void populatePatientJTable(){
        
        DefaultTableModel model = (DefaultTableModel) patientJTable.getModel();
        patientJTable.setRowSorter(new TableRowSorter(model));
        model.setRowCount(0);
        for (Patient  p :patientOrganization.getPatientDirectory().getPatientList()){
            Object[] row = new Object[4];
           
            row[0] = p;
            row[1] = p.getStringDOB();
            row[2] = p.getGender();
            row[3] = p.getTypeOfCancer();
            
            model.addRow(row);
        }  
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenu1 = new javax.swing.JMenu();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu2 = new javax.swing.JMenu();
        jMenu3 = new javax.swing.JMenu();
        registerPatient = new javax.swing.JButton();
        confirmAppointment = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        patientJTable = new javax.swing.JTable();
        viewPatient = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        donorJTextField = new javax.swing.JTextField();
        donorIDJTextField = new javax.swing.JTextField();
        bloodgroupJTextField = new javax.swing.JTextField();
        clearJButton = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        createPatientAccountJButton = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        monthsJTextField = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        yearsJTextField1 = new javax.swing.JTextField();
        removePatientJButton = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        dateAndTimeJLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();

        jMenu1.setText("jMenu1");

        jMenu2.setText("File");
        jMenuBar1.add(jMenu2);

        jMenu3.setText("Edit");
        jMenuBar1.add(jMenu3);

        setBackground(new java.awt.Color(255, 255, 255));
        setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Receptionist Work Area", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 20))); // NOI18N

        registerPatient.setBackground(new java.awt.Color(0, 0, 0));
        registerPatient.setForeground(new java.awt.Color(255, 255, 255));
        registerPatient.setIcon(new javax.swing.ImageIcon(getClass().getResource("/userinterface/Icons/user-couple-icon.png"))); // NOI18N
        registerPatient.setText("Register Patient");
        registerPatient.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        registerPatient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                registerPatientActionPerformed(evt);
            }
        });

        confirmAppointment.setBackground(new java.awt.Color(0, 0, 0));
        confirmAppointment.setForeground(new java.awt.Color(255, 255, 255));
        confirmAppointment.setIcon(new javax.swing.ImageIcon(getClass().getResource("/userinterface/Icons/confirmappointment-icon.png"))); // NOI18N
        confirmAppointment.setText("Confirm Appointment");
        confirmAppointment.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        confirmAppointment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                confirmAppointmentActionPerformed(evt);
            }
        });

        patientJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Patient", "Date Of Birth", "Gender", "Type of Cancer"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(patientJTable);

        viewPatient.setBackground(new java.awt.Color(0, 0, 0));
        viewPatient.setForeground(new java.awt.Color(255, 255, 255));
        viewPatient.setIcon(new javax.swing.ImageIcon(getClass().getResource("/userinterface/Icons/recp Search.png"))); // NOI18N
        viewPatient.setText("View Patient");
        viewPatient.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        viewPatient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewPatientActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setText("Enterprise");

        jLabel2.setText("value");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel3.setText("Patient Details");

        jLabel4.setText("First Name");

        jLabel5.setText("Patient ID.");

        jLabel6.setText("Last Name");

        clearJButton.setBackground(new java.awt.Color(0, 0, 0));
        clearJButton.setForeground(new java.awt.Color(255, 255, 255));
        clearJButton.setIcon(new javax.swing.ImageIcon("C:\\Users\\Saurabh\\Desktop\\GRE docs\\NEU\\Assignments\\AED\\Project_Proposal\\icons\\clear_refresh_Other-Power-Restart-Metro-icon.png")); // NOI18N
        clearJButton.setText("Clear");
        clearJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearJButtonActionPerformed(evt);
            }
        });

        createPatientAccountJButton.setBackground(new java.awt.Color(0, 0, 0));
        createPatientAccountJButton.setForeground(new java.awt.Color(255, 255, 255));
        createPatientAccountJButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/userinterface/Icons/Male-user-add-icon.png"))); // NOI18N
        createPatientAccountJButton.setText("Create Patient Account");
        createPatientAccountJButton.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        createPatientAccountJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createPatientAccountJButtonActionPerformed(evt);
            }
        });

        jLabel8.setText("Age:");

        monthsJTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                monthsJTextFieldActionPerformed(evt);
            }
        });

        jLabel9.setText("Years");

        jLabel10.setText("Months");

        yearsJTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                yearsJTextField1ActionPerformed(evt);
            }
        });

        removePatientJButton.setBackground(new java.awt.Color(0, 0, 0));
        removePatientJButton.setForeground(new java.awt.Color(255, 255, 255));
        removePatientJButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/userinterface/Icons/recp-cart-remove-icon.png"))); // NOI18N
        removePatientJButton.setText("Remove Patient");
        removePatientJButton.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        removePatientJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removePatientJButtonActionPerformed(evt);
            }
        });

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel11.setText("Existing Patients:");

        dateAndTimeJLabel1.setText("date and time");

        jButton1.setBackground(new java.awt.Color(0, 0, 0));
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/userinterface/Icons/edit patient.png"))); // NOI18N
        jButton1.setText("Edit Patient");
        jButton1.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator1)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(13, 13, 13)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel2))
                            .addComponent(dateAndTimeJLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(586, 586, 586))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 688, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(1, 1, 1)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel6)
                                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel4)))
                                    .addComponent(jLabel8))
                                .addGap(44, 44, 44)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(donorIDJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 307, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(yearsJTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addComponent(jLabel9)
                                                .addGap(76, 76, 76)))
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel10)
                                            .addComponent(monthsJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(donorJTextField)
                                        .addComponent(bloodgroupJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 307, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addGap(191, 191, 191)
                                .addComponent(clearJButton))
                            .addComponent(jLabel11)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(registerPatient, javax.swing.GroupLayout.PREFERRED_SIZE, 224, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(createPatientAccountJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 224, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(confirmAppointment, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(removePatientJButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(viewPatient, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addGap(18, 18, 18)
                .addComponent(dateAndTimeJLabel1)
                .addGap(18, 18, 18)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(registerPatient)
                    .addComponent(jButton1)
                    .addComponent(viewPatient, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(removePatientJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(createPatientAccountJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(confirmAppointment)))
                .addGap(23, 23, 23)
                .addComponent(jLabel11)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(clearJButton))
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(donorJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(bloodgroupJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(donorIDJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(jLabel10)
                    .addComponent(jLabel8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(yearsJTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(monthsJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(14, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void registerPatientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_registerPatientActionPerformed
        // TODO add your handling code here:
        //donorList=enterprise.getDonorDirectory();
       
        RegisterPatientJPanel registerDonor=new RegisterPatientJPanel(userProcessContainer,enterprise);
        userProcessContainer.add("RegisterDonorJPanel",new  JScrollPane(registerDonor));
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);
        
    }//GEN-LAST:event_registerPatientActionPerformed

    private void confirmAppointmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_confirmAppointmentActionPerformed
        // TODO add your handling code here:
        ConfirmAppointmentJPanel confirmAppointment=new ConfirmAppointmentJPanel(userProcessContainer,patientOrganization,enterprise,business);
        userProcessContainer.add("ConfirmAppointmentJPanel",new  JScrollPane(confirmAppointment));
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);
        
    }//GEN-LAST:event_confirmAppointmentActionPerformed

    private void viewPatientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewPatientActionPerformed
        // TODO add your handling code here:
        int selectedRow=patientJTable.getSelectedRow();
         if (selectedRow < 0){
             JOptionPane.showMessageDialog(null, "Please select a row.", "Info", JOptionPane.INFORMATION_MESSAGE);
            return;
        }else{
         Patient patient=(Patient)patientJTable.getValueAt(selectedRow,0);
         donorJTextField.setText(patient.getFirstName());
         donorIDJTextField.setText(Integer.toString(patient.getId()));
         bloodgroupJTextField.setText(patient.getLastName());
         float years=AgeCalculator.calculategetage(new Date(), patient.getDateOfBirth());
         float months=AgeCalculator.getMonths(new Date(), patient.getDateOfBirth());
         yearsJTextField1.setText(Float.toString(years));
         monthsJTextField.setText(Float.toString(months));
         
         
         
            
         }
         
    }//GEN-LAST:event_viewPatientActionPerformed

    private void clearJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearJButtonActionPerformed
        // TODO add your handling code here:
         donorJTextField.setText("");
         donorIDJTextField.setText("");
         bloodgroupJTextField.setText("");
         yearsJTextField1.setText("");
         monthsJTextField.setText("");
    }//GEN-LAST:event_clearJButtonActionPerformed

    private void createPatientAccountJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createPatientAccountJButtonActionPerformed
        // TODO add your handling code here:
        JScrollPane scroller = new JScrollPane(new CreatePatientUserAccountJPanel(userProcessContainer, userAccount, enterprise,business));
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        userProcessContainer.add("CreatePatientUserAccountJPanel",scroller );
        layout.next(userProcessContainer);
    }//GEN-LAST:event_createPatientAccountJButtonActionPerformed

    private void monthsJTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_monthsJTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_monthsJTextFieldActionPerformed

    private void yearsJTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_yearsJTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_yearsJTextField1ActionPerformed

    private void removePatientJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removePatientJButtonActionPerformed
        // TODO add your handling code here:
       
        int selectedRow=patientJTable.getSelectedRow();
        
        if (selectedRow < 0){
            JOptionPane.showMessageDialog(null, "Please select a row.", "Info", JOptionPane.INFORMATION_MESSAGE);
            return;
        }else{
            int flag= JOptionPane.showConfirmDialog(this, "Are you sure want to remove this patient ?","Warning", JOptionPane.YES_NO_OPTION);
            if(flag==0){
                Patient patient=(Patient)patientJTable.getValueAt(selectedRow, 0);
                patientOrganization.getPatientDirectory().getPatientList().remove(patient);
                patientOrganization.getEmployeeDirectory().getEmployeeList().remove((Employee)patient);
                UserAccount ua=null;
                
                
                for(UserAccount userAcc:patientOrganization.getUserAccountDirectory().getUserAccountList()){
                    if(userAcc.getEmployee().equals((Employee)patient)){
                        ua=userAcc;
                        break;
                    }
                }
                CommunityProfile comP=null;
                for(CommunityProfile cp:patientOrganization.getCommunity().getListOfCommunityMembers()){
                    if(cp.getUserAccount().getEmployee().equals((Employee)patient)){
                        comP=cp;
                        break;
                    }
                }
                patientOrganization.getCommunity().leaveCommunity(comP);
                patientOrganization.getUserAccountDirectory().getUserAccountList().remove(ua);
                populatePatientJTable();
                JOptionPane.showMessageDialog(null, "Patient Removed.", "Info", JOptionPane.INFORMATION_MESSAGE);

            }
        }
    }//GEN-LAST:event_removePatientJButtonActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        int selectedRow=patientJTable.getSelectedRow();
         if (selectedRow < 0){
             JOptionPane.showMessageDialog(null, "Please select a patient profile to edit.", "Info", JOptionPane.INFORMATION_MESSAGE);
            return;
        }else{
         Patient patient=(Patient)patientJTable.getValueAt(selectedRow,0);
        EditPatientJPanel editPatientJPanel=new EditPatientJPanel(userProcessContainer,patient,enterprise);
        userProcessContainer.add("editPatientJPanel",new  JScrollPane(editPatientJPanel));
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);
        }
    }//GEN-LAST:event_jButton1ActionPerformed
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField bloodgroupJTextField;
    private javax.swing.JButton clearJButton;
    private javax.swing.JButton confirmAppointment;
    private javax.swing.JButton createPatientAccountJButton;
    private javax.swing.JLabel dateAndTimeJLabel1;
    private javax.swing.JTextField donorIDJTextField;
    private javax.swing.JTextField donorJTextField;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextField monthsJTextField;
    private javax.swing.JTable patientJTable;
    private javax.swing.JButton registerPatient;
    private javax.swing.JButton removePatientJButton;
    private javax.swing.JButton viewPatient;
    private javax.swing.JTextField yearsJTextField1;
    // End of variables declaration//GEN-END:variables
}
