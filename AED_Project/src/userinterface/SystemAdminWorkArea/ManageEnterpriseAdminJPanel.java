/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.SystemAdminWorkArea;

import Business.EcoSystem;
import Business.Employee.Employee;
import Business.Enterprise.Enterprise;
import Business.Enterprise.EnterpriseDirectory;
import Business.Network.Network;
import Business.Organization.Organization;
import Business.Role.Role;
import Business.UserAccount.UserAccount;
import Business.Utils.MyStringVerifier;
import java.awt.CardLayout;
import java.awt.Component;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JViewport;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author Saurabh
 */
public class ManageEnterpriseAdminJPanel extends javax.swing.JPanel {

    private JPanel userProcessContainer;
    private EcoSystem business;

    /**
     * Creates new form ManageEnterpriseJPanel
     */
    public ManageEnterpriseAdminJPanel(JPanel userProcessContainer, EcoSystem system) {
        initComponents();

        this.userProcessContainer = userProcessContainer;
        this.business = system;
        
        MyStringVerifier myStringVerifier= new MyStringVerifier();
        nameJTextField.setInputVerifier(myStringVerifier);
        lastnameJTextField1.setInputVerifier(myStringVerifier);
        populateTable();
        populateNetworkComboBox();
    }

    private void populateTable() {
        DefaultTableModel model = (DefaultTableModel) enterpriseJTable.getModel();
        enterpriseJTable.setRowSorter(new TableRowSorter(model));
        model.setRowCount(0);
        for (Network network : business.getNetworkList()) {
            for (Enterprise enterprise : network.getEnterpriseDirectory().getEnterpriseList()) {
                for (UserAccount userAccount : enterprise.getUserAccountDirectory().getUserAccountList()) {
                    Object[] row = new Object[3];
                    row[0] = enterprise;
                    row[1] = network;
                    row[2] = userAccount;

                    model.addRow(row);
                }
            }
        }
    }

    private void populateNetworkComboBox(){
        networkJComboBox.removeAllItems();
        
        for (Network network : business.getNetworkList()){
            networkJComboBox.addItem(network);
        }
    }
    
    private void populateEnterpriseComboBox(Network network){
        enterpriseJComboBox.removeAllItems();
        
        for (Enterprise enterprise : network.getEnterpriseDirectory().getEnterpriseList()){
            enterpriseJComboBox.addItem(enterprise);
        }
        
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel7 = new javax.swing.JLabel();
        roleJComboBox = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        enterpriseJTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        networkJComboBox = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        usernameJTextField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        enterpriseJComboBox = new javax.swing.JComboBox();
        submitJButton = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        nameJTextField = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        passwordJPasswordField = new javax.swing.JPasswordField();
        backJButton = new javax.swing.JButton();
        removeNetworkjButton = new javax.swing.JButton();
        lastnameJTextField1 = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        roleJComboBox1 = new javax.swing.JComboBox();

        jLabel7.setText("Role");

        setBackground(new java.awt.Color(255, 255, 255));

        enterpriseJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Enterprise Name", "Network", "Username"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(enterpriseJTable);

        jLabel1.setText("Network");

        networkJComboBox.setBackground(new java.awt.Color(0, 0, 0));
        networkJComboBox.setForeground(new java.awt.Color(255, 255, 255));
        networkJComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                networkJComboBoxActionPerformed(evt);
            }
        });

        jLabel2.setText("Username");

        jLabel3.setText("Enterprise");

        enterpriseJComboBox.setBackground(new java.awt.Color(0, 0, 0));
        enterpriseJComboBox.setForeground(new java.awt.Color(255, 255, 255));
        enterpriseJComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enterpriseJComboBoxActionPerformed(evt);
            }
        });

        submitJButton.setBackground(new java.awt.Color(0, 0, 0));
        submitJButton.setForeground(new java.awt.Color(255, 255, 255));
        submitJButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/userinterface/Icons/Button-Submit-icon.png"))); // NOI18N
        submitJButton.setText("Submit");
        submitJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitJButtonActionPerformed(evt);
            }
        });

        jLabel4.setText("Password");

        jLabel5.setText("First Name");

        backJButton.setBackground(new java.awt.Color(0, 0, 0));
        backJButton.setForeground(new java.awt.Color(255, 255, 255));
        backJButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/userinterface/Icons/arrow-back-icon.png"))); // NOI18N
        backJButton.setText(" Back");
        backJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backJButtonActionPerformed(evt);
            }
        });

        removeNetworkjButton.setBackground(new java.awt.Color(0, 0, 0));
        removeNetworkjButton.setForeground(new java.awt.Color(255, 255, 255));
        removeNetworkjButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/userinterface/Icons/cart-remove-icon.png"))); // NOI18N
        removeNetworkjButton.setText("Remove");
        removeNetworkjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeNetworkjButtonActionPerformed(evt);
            }
        });

        jLabel6.setText("Last Name");

        jLabel8.setText("Role");

        roleJComboBox1.setBackground(new java.awt.Color(0, 0, 0));
        roleJComboBox1.setForeground(new java.awt.Color(255, 255, 255));
        roleJComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                roleJComboBox1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6)
                    .addComponent(backJButton)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel1)
                                .addComponent(jLabel3))
                            .addGap(52, 52, 52)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(enterpriseJComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(networkJComboBox, 0, 133, Short.MAX_VALUE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(removeNetworkjButton))
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 523, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addComponent(jLabel8)
                            .addGap(79, 79, 79)
                            .addComponent(roleJComboBox1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addComponent(jLabel2)
                            .addGap(52, 52, 52)
                            .addComponent(usernameJTextField))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel4)
                                .addComponent(jLabel5))
                            .addGap(49, 49, 49)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(passwordJPasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(lastnameJTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(nameJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(submitJButton))))))
                .addContainerGap(39, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(networkJComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(removeNetworkjButton))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(enterpriseJComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(35, 35, 35)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(roleJComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(usernameJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(passwordJPasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(nameJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lastnameJTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addGap(45, 45, 45)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(backJButton)
                    .addComponent(submitJButton))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void networkJComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_networkJComboBoxActionPerformed

        Network network = (Network) networkJComboBox.getSelectedItem();
        if (network != null){
            populateEnterpriseComboBox(network);
        }
        
        
    }//GEN-LAST:event_networkJComboBoxActionPerformed

    private void submitJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitJButtonActionPerformed
        boolean userNameIsUnique=false;
        int empCount;
        int idValue;
        Enterprise enterprise = (Enterprise) enterpriseJComboBox.getSelectedItem();
        Role role = (Role) roleJComboBox1.getSelectedItem();
        String username = usernameJTextField.getText().trim();
        String password = String.valueOf(passwordJPasswordField.getPassword()).trim();
        String name = nameJTextField.getText().trim();
        String lastName=lastnameJTextField1.getText().trim();
        if(enterprise!=null){
            if(username.length()!=0 && password.length()!=0 && name.length()!=0 && lastName.length()!=0){
                 for(Network n:business.getNetworkList()){
                     JOptionPane.showMessageDialog(null, n);
                        EnterpriseDirectory ed=n.getEnterpriseDirectory();
                            for(Enterprise e:ed.getEnterpriseList()){
                                
                                //If enterprise user account list is not empty do this.
                                        if(!e.getUserAccountDirectory().getUserAccountList().isEmpty()){
                                            userNameIsUnique=e.getUserAccountDirectory().checkIfUsernameIsUnique(username);
                                            //if username is found in Enterprise list: check in containing organizations:
                                            if(userNameIsUnique==true){
                                                if(!e.getOrganizationDirectory().getOrganizationList().isEmpty()){
                                                    for(Organization o:e.getOrganizationDirectory().getOrganizationList()){
                                                        if(!o.getUserAccountDirectory().getUserAccountList().isEmpty()){
                                                            userNameIsUnique=o.getUserAccountDirectory().checkIfUsernameIsUnique(username);
                                                            if(userNameIsUnique==false){
                                                            JOptionPane.showMessageDialog(null, "Username already assigned to other employee in the system in Enterprise "+ e +",Organization "+o+".Please use some othe user id.", "Info", JOptionPane.INFORMATION_MESSAGE);
                                                            break;
                                                            }
                                                       }else{
                                                            userNameIsUnique=true;
                                                       }
                                                    }
                                                }else{
                                                            userNameIsUnique=true;
                                                       }
                                            }else{
                                                userNameIsUnique=false;
                                                JOptionPane.showMessageDialog(null,"User Account already Assigned.");
                                                break;
                                            }
                                        
                                        }//If enterprise user list is not empty part ends
                                        
                                        
                                        //if enterprise user list is empty check in orgs
                                        else{
                                                if(!e.getOrganizationDirectory().getOrganizationList().isEmpty()){

                                                            for(Organization o:e.getOrganizationDirectory().getOrganizationList()){

                                                                if(!o.getUserAccountDirectory().getUserAccountList().isEmpty()){
                                                                    userNameIsUnique=o.getUserAccountDirectory().checkIfUsernameIsUnique(username);
                                                                    if(userNameIsUnique==false){
                                                                    JOptionPane.showMessageDialog(null, "Username already assigned to other employee in the system in Enterprise "+ e +",Organization "+o+".Please use some othe user id.", "Info", JOptionPane.INFORMATION_MESSAGE);
                                                                    break;
                                                                    }
                                                                }else{
                                                                    userNameIsUnique=true;
                                                                }
                                                            }
                                                }else{
                                                    userNameIsUnique=true;
                                                }
                                        }if(userNameIsUnique==false){
                                                break;
                                            }//If enterprise user list is empty part ends
                                        
                              }if(userNameIsUnique==false){
                              break;
                              }//Enterprise Directory loop ends
                            
                            
                }///Network Loop ends
                
                if(userNameIsUnique){            
                     Employee employee = enterprise.getEmployeeDirectory().createEmployee(name,lastName);
                     UserAccount account = enterprise.getUserAccountDirectory().createUserAccount(username, password, employee, role);
                     populateTable();
                     JOptionPane.showMessageDialog(null, "Admin Account now setup in system.", "Info", JOptionPane.INFORMATION_MESSAGE);
                     nameJTextField.setText("");
                     lastnameJTextField1.setText("");
                     usernameJTextField.setText("");
                     passwordJPasswordField.setText("");
                }
                
            }else{
                JOptionPane.showMessageDialog(null, "All fields are mandatory.", "Info", JOptionPane.INFORMATION_MESSAGE);
            }
            
        }
        
        
        
    }//GEN-LAST:event_submitJButtonActionPerformed

    private void backJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backJButtonActionPerformed
        userProcessContainer.remove(this.getParent().getParent());
        userProcessContainer.remove(this.getParent());
        userProcessContainer.remove(this);
        Component[] componentArray = userProcessContainer.getComponents();
        Component component = componentArray[componentArray.length-1];
        JScrollPane jsp=(JScrollPane)component;
        JViewport jv=(JViewport)jsp.getComponent(0);
        SystemAdminWorkAreaJPanel sysAdminwjp = (SystemAdminWorkAreaJPanel) jv.getComponent(0);
        sysAdminwjp.populateTree();
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backJButtonActionPerformed

    private void removeNetworkjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeNetworkjButtonActionPerformed
        // TODO add your handling code here:
        int selectedRow=enterpriseJTable.getSelectedRow();
        if (selectedRow < 0){
            JOptionPane.showMessageDialog(null, "Please select a row.", "Info", JOptionPane.INFORMATION_MESSAGE);
            return;
        }else{
            int flag= JOptionPane.showConfirmDialog(this, "Are you sure want to remove this Admin Account?","Warning", JOptionPane.YES_NO_OPTION);
            if(flag==0){
                Enterprise enterprise=(Enterprise)enterpriseJTable.getValueAt(selectedRow, 0);
                UserAccount userAccount=(UserAccount)enterpriseJTable.getValueAt(selectedRow, 2);
                enterprise.getUserAccountDirectory().getUserAccountList().remove(userAccount);
                populateTable();
                JOptionPane.showMessageDialog(null, "Admin Account Removed.", "Info", JOptionPane.INFORMATION_MESSAGE);

            }
        }
    }//GEN-LAST:event_removeNetworkjButtonActionPerformed

    private void roleJComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_roleJComboBox1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_roleJComboBox1ActionPerformed

    private void enterpriseJComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enterpriseJComboBoxActionPerformed
        // TODO add your handling code here:
        Enterprise enterprise = (Enterprise) enterpriseJComboBox.getSelectedItem();
        if (enterprise != null){
            
            populateRoleComboBox(enterprise);
        }
    }//GEN-LAST:event_enterpriseJComboBoxActionPerformed
public void populateRoleComboBox(Enterprise enterprise){
    roleJComboBox1.removeAllItems();
        for (Role role : enterprise.getSupportedRole()){
            
            roleJComboBox1.addItem(role);
        }
}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backJButton;
    private javax.swing.JComboBox enterpriseJComboBox;
    private javax.swing.JTable enterpriseJTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField lastnameJTextField1;
    private javax.swing.JTextField nameJTextField;
    private javax.swing.JComboBox networkJComboBox;
    private javax.swing.JPasswordField passwordJPasswordField;
    private javax.swing.JButton removeNetworkjButton;
    private javax.swing.JComboBox roleJComboBox;
    private javax.swing.JComboBox roleJComboBox1;
    private javax.swing.JButton submitJButton;
    private javax.swing.JTextField usernameJTextField;
    // End of variables declaration//GEN-END:variables
}
